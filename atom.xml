<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PRIN BLOG</title>
  
  <subtitle>半吊子全栈开发者的日常</subtitle>
  <link href="https://prinsss.github.io/atom.xml" rel="self"/>
  
  <link href="https://prinsss.github.io/"/>
  <updated>2024-03-13T00:00:00.000Z</updated>
  <id>https://prinsss.github.io/</id>
  
  <author>
    <name>prin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重构博客友链页面 &amp; 友链朋友圈开源</title>
    <link href="https://prinsss.github.io/building-blog-friend-circle/"/>
    <id>https://prinsss.github.io/building-blog-friend-circle/</id>
    <published>2024-03-13T00:00:00.000Z</published>
    <updated>2024-03-13T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来看看效果：<a href="https://prinsss.github.io/friends/">友情链接 - PRIN BLOG</a>。</p><p>自我感觉还是不错的，友链的博客们有什么更新都可以实时展示在页面上，一目了然。作为博主，不用打开 RSS 阅读器就可以查看新文章；作为访客，也可以快速找到更多自己感兴趣的内容，比起原来全是链接的页面，看起来也让人更有点击欲望了。</p><p>从临时起意到开发完成总共两个晚上，最速传说就是我！<del>（误）</del></p><span id="more"></span><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>前段时间看到有个博客用了这样的一个东西：</p><ul><li><a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends">Rock-Candy-Tea/hexo-circle-of-friends: 友链朋友圈</a></li><li><a href="https://www.yyyzyyyz.cn/fcircle/">朋友圈 | Black Flies</a></li></ul><p>当时就感觉卧槽好高端，很有想法。</p><p>这种聚合订阅的形式有个名字，叫做 <a href="https://en.wikipedia.org/wiki/Planet_(software)">Planet</a>（社区星球）。Planet 通常用于聚合某个领域的博客，然后展示在一个页面上，方便用户一站式阅读，比如：</p><ul><li><a href="https://planetpython.org">Planet Python</a></li><li><a href="https://planet.oursqlcommunity.org">Planet MySQL</a></li><li><a href="https://planet.archlinuxcn.org/">Arch Linux 中文星球</a></li></ul><p>这种形式在开源社区里比较常见，不过用在博客的友链上我倒还是第一次看到。</p><hr /><p>就像我在本站友链页里说的一样，独立博客之间的联系基本上就是靠的链接交换和评论互访。一个博客的访客看到了其他博客的链接，点过去看了，然后从对面的友链中，又导航到新的博客……如此往复，我们就依靠着这种从现在看来显得十分古老的方式，维系着这些信息孤岛之间的纽带。原始又浪漫。</p><p>不过这里就会涉及到一个用户点击率的问题。我自己之前在维护友链页面的时候，总感觉只放标题和链接看起来效果不怎么好。就算加上描述、头像这些元素，也总觉得差点意思。因为一个博客最重要的其实还是它的内容，仅靠一个网站标题，可能很难吸引到其他用户去点击。</p><p><strong>而「友链朋友圈」的这种形式，就像微信朋友圈一样，作为一个聚合的订阅流，展示了列表中每个博客的最新文章。</strong></p><p>比起干巴巴的链接，这显然会更加吸引人。虽然我写博客到现在也已经 9 年了，早就佛系了，主打一个爱看不看。不过对于和我交换了友链的博主们，还是希望他们能够获得更多的曝光和点击（虽然我这破地方也没多少流量就是啦……），也希望我的访客们也可以遇到更多有价值的博客。</p><hr /><p>然而在准备接入的时候，我发现这玩意儿不就是一个小型的 RSS 阅读器么……其实等于是自己又实现了一套订阅管理、文章爬取、数据保存之类的功能。</p><p>于是我就寻思，可能直接复用已有 RSS 阅读器 API 的思路会更好，让专业的软件做专业的事。友链的管理也可以直接复用 RSS 阅读器的订阅管理功能，这样增删改也不需要了，我们就只需要封装一下查询的 API，提供一个精简的展示界面就 OK。</p><h2 id="技术栈选择"><a href="#技术栈选择" class="headerlink" title="技术栈选择"></a>技术栈选择</h2><p>作为行动力的化身，咱们自然是说干就干，下班回家马上开工！</p><p>首先是 RSS 后端的选择。</p><p>市面上的 RSS 阅读器有很多，我自己主要用的是 Inoreader。然而我看了下，<a href="https://www.inoreader.com/developers/rate-limiting">Inoreader API</a> 只面向 $9.99 一个月的 Pro Plan 开放，而且限制每天 100 个请求……这还玩个屁。<a href="https://developers.feedly.com/reference/introduction">Feedly</a> 也是差不多一个尿性，可以全部 PASS 了。我也不知道该说他们什么好，也许做 RSS 真的不挣钱，只能这样扣扣搜搜了吧。</p><p>另外一个选择就是各种支持 self-host 的 RSS 阅读器，比如 <a href="https://tt-rss.org">Tiny Tiny RSS</a> 和 <a href="https://miniflux.app">Miniflux</a>。我之前部署过 TTRSS，说实话感觉还是太重了。Miniflux 则是使用 Go 编写的，该有的功能都有，非常轻量级，部署也很方便。就决定是它了！</p><p>技术栈方面选择了之前一直比较心水的 <a href="https://hono.dev">Hono</a>，部署在 Cloudflare Workers 上。前端方面没有使用任何框架，连客户端 JS 都没几行，基本上是纯服务端渲染。有时候不得不感叹技术的趋势就是个圈，以前那么流行 SPA，现在又都在搞静态生成了。</p><p><img src="/building-blog-friend-circle/cf-workers-usage.jpg" alt="cf-workers-usage" /></p><p>页面渲染使用了 Hono 提供的 <a href="https://hono.dev/guides/jsx">JSX</a> 方案，可以在服务端用类似 React 的语法返回 HTML，挺好用的。不过 CSS 没有用 Hono 的那一套 CSS-in-JS，因为要允许用户覆盖样式，所以要用语义化的类名。最后选了 <a href="https://lesscss.org">Less</a>，还是熟悉的味道。</p><p>前端文件的构建使用了 <a href="https://tsup.egoist.dev">tsup</a>，配置文件就几行，爽。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现思路很简单，就是做一个 Proxy 层，把：</p><ul><li><code>GET /v1/categories/22/entries</code> - <a href="https://miniflux.app/docs/api.html#endpoint-get-category-entries">Get Category Entries</a></li><li><code>GET /v1/categories/22/feeds</code> - <a href="https://miniflux.app/docs/api.html#endpoint-get-category-feeds">Get Category Feeds</a></li></ul><p>这两个 Miniflux 的 API 包一下。这里要注意不能暴露实际的 API Endpoint，避免可能的恶意攻击。API 缓存也要在我们这一层做好，防止频繁刷新把服务打爆。</p><p>缓存策略上使用了 SWR (Stale-While-Revalidate)：</p><ol type="1"><li>拿到 API 响应后，放到 KV 中，同时把时间戳放入 metadata；</li><li>后续从 KV 读取缓存时，对比当前时间和 metadata 中的时间戳；</li><li>如果经过的时间没有超过设置的 TTL，说明缓存有效，直接返回前端；</li><li><strong>如果经过的时间超过了 TTL，则标记缓存为 <code>stale</code> 状态，依然返回前端</strong>；</li><li>此时，后端在后台重新请求 API，并将最新的响应写入 KV 中；</li><li>下一次再从 KV 读取时，拿到的缓存就是最新的了。</li></ol><p>这样可以保证最快的响应速度，以及相对及时的更新速度，比较适合这种场景。</p><p>最后的交付形式其实就是两个 HTML 页面，通过 <code>&lt;iframe&gt;</code> 的形式嵌入到网页中。另外参考 <a href="https://giscus.app">giscus</a> 提供了一个脚本，可以设置参数并自动完成 iframe 的初始化，用户只需要引入一个 <code>&lt;script&gt;</code> 标签即可，非常方便：</p><pre class="html"><code>&lt;script  async  data-category-id=&quot;28810&quot;  src=&quot;https://blog-friend-circle.prin.studio/app.js&quot;&gt;&lt;/script&gt;</code></pre><p><img src="/building-blog-friend-circle/friends-page-demo.jpg" alt="friends-page-demo" /></p><p>当然也可以作为独立页面打开，有做双栏布局适配：</p><p><a href="https://blog-friend-circle.prin.studio/category/2/entries">blog-friend-circle.prin.studio/category/2/entries</a></p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>新版博客友链朋友圈的所有代码都开源在 GitHub 上，欢迎使用：</p><p>👉 <a href="https://github.com/prinsss/blog-friend-circle">prinsss/blog-friend-circle</a></p><p>这个方案和 hexo-circle-of-friends 并没有孰优孰劣之分，只是侧重点和实现方式不同。不过我这个的一个好处是，如果你已经在用 Miniflux 了，那么可以直接复用已有的大部分能力，不需要再起一个 Python 服务和数据库去抓取、保存 RSS，相对来说会更轻量、稳定一些。</p><p>如果你选择使用 Miniflux 官方提供的 RSS 服务，甚至可以无需服务器，部署一下 CF Workers 就行了，像我这样的懒人最爱。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先来看看效果：&lt;a href=&quot;https://prinsss.github.io/friends/&quot;&gt;友情链接 - PRIN BLOG&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;自我感觉还是不错的，友链的博客们有什么更新都可以实时展示在页面上，一目了然。作为博主，不用打开 RSS 阅读器就可以查看新文章；作为访客，也可以快速找到更多自己感兴趣的内容，比起原来全是链接的页面，看起来也让人更有点击欲望了。&lt;/p&gt;
&lt;p&gt;从临时起意到开发完成总共两个晚上，最速传说就是我！&lt;del&gt;（误）&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="博客" scheme="https://prinsss.github.io/tag/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="RSS" scheme="https://prinsss.github.io/tag/RSS/"/>
    
  </entry>
  
  <entry>
    <title>真的不可以在 React 组件内部嵌套定义子组件吗？</title>
    <link href="https://prinsss.github.io/react-unstable-nested-components/"/>
    <id>https://prinsss.github.io/react-unstable-nested-components/</id>
    <published>2024-02-25T16:00:00.000Z</published>
    <updated>2024-02-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 Code Review 时，看到有同事写了这样的代码：</p><pre class="jsx"><code>function TodoList() &#123;  const [list, setList] = useState([]);  const TodoItem = useCallback((props) =&gt; &#123;    return &lt;li&gt;&#123;props.text&#125;&lt;/li&gt;;  &#125;, []);  return &lt;ul&gt;&#123;list.map((item, index) =&gt; &lt;TodoItem key=&#123;index&#125; text=&#123;item&#125; /&gt;)&#125;&lt;/ul&gt;;&#125;</code></pre><p>有经验的 React 开发者肯定一下子就看出问题了：<strong>在组件内部嵌套定义组件，会导致子组件每次都重新挂载</strong>。因为每次渲染时，创建的函数组件其实都是不同的对象。</p><p>但是他又有包了 <code>useCallback</code> 让引用保持一致，好像又没什么问题……？</p><p>这波骚操作让我突然有点拿不准了，所以今天咱们一起来验证一下，用 <code>useMemo</code> 或者 <code>useCallback</code> 包裹嵌套定义的子组件，对 React 渲染会有什么影响。以及如果有影响，应该如何用更合适的方法重构。</p><span id="more"></span><h2 id="tldr"><a href="#tldr" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>先说结论：</p><blockquote><p><strong>永远不要在 React 组件内部嵌套定义子组件。</strong></p></blockquote><p>如果你有类似的代码，请使用以下方法替代：</p><ol type="1"><li>把子组件移到最外层去，将原有的依赖项作为 props 传入</li><li>把子组件改为「渲染函数」，通过调用函数插入 JSX 节点</li></ol><p>为什么？请接着往下看。</p><h2 id="组件重新挂载会造成的问题"><a href="#组件重新挂载会造成的问题" class="headerlink" title="组件重新挂载会造成的问题"></a>组件重新挂载会造成的问题</h2><p>来看这段代码（可以在 <a href="https://stackblitz.com/edit/react-unstable-nested-components?file=src%2FApp.tsx">StackBlitz Demo</a> 中运行）：</p><pre class="jsx"><code>function TodoList() &#123;  const [list, setList] = useState([]);  // 嵌套定义子组件（好孩子不要学哦）  const TodoItem = (props) =&gt; &#123;    return &lt;li&gt;&#123;props.text&#125;&lt;/li&gt;;  &#125;;  const handleAdd = () =&gt; setList([...list, `Item $&#123;list.length + 1&#125;`]);  return (    &lt;div&gt;      &lt;button onClick=&#123;handleAdd&#125;&gt;Add&lt;/button&gt;      &#123;/* 渲染刚才定义的子组件 */&#125;      &lt;ul&gt;        &#123;list.map((item, index) =&gt; (          &lt;TodoItem key=&#123;index&#125; text=&#123;item&#125; /&gt;        ))&#125;      &lt;/ul&gt;    &lt;/div&gt;  );&#125;</code></pre><p>可能不少初学者都写出过类似的代码：JavaScript 语言可以嵌套定义函数，React 函数式组件就是函数，那 React 组件不也可以嵌套定义？</p><p>还真不是这么回事。我们来实际运行一下这段代码看看：</p><blockquote><p>Tips: 这里使用了 <a href="https://github.com/shuding/tilg"><code>useTilg</code></a> 这个库来展示组件生命周期。</p></blockquote><p><img src="/react-unstable-nested-components/nested-component.png" alt="nested-component" /></p><p>可以看到，每次点击 Add 按钮在 <code>&lt;TodoList/&gt;</code> 列表中添加元素时，之前旧的 <code>&lt;TodoItem/&gt;</code> 组件实例就会被卸载 (unmount)、销毁。React 会创建全新的组件实例，然后再挂载 (mount) 上去。</p><p>也就是说，<strong>这些组件实例全都变成一次性的了</strong>。</p><p>这还只是一个简单的示例，如果是实际应用场景，一个组件和它的子组件中，可能包含了成百上千个 DOM 节点。如果每次状态更新都会导致这些组件和对应的 DOM 节点被卸载、创建、重新挂载……那应用性能可就是「画面太美我不敢看」了。</p><p>更严重的是，组件的卸载还会导致其内部的<a href="https://codepen.io/ariperkkio/pen/vYLodLB">状态全部丢失</a>。</p><p>那怎么会这样呢？这要从 React 的渲染机制，以及 Reconciliation 流程说起。</p><h2 id="react-渲染机制之-reconciliation"><a href="#react-渲染机制之-reconciliation" class="headerlink" title="React 渲染机制之 Reconciliation"></a>React 渲染机制之 Reconciliation</h2><p>我们知道 React 的渲染大致可以分为<a href="https://react.dev/learn/render-and-commit">两个阶段</a>：</p><ol type="1"><li><code>Render</code> 阶段：执行组件的渲染方法，<strong>找出更新前后节点树的变化</strong>，计算需要执行的改动；</li><li><code>Commit</code> 阶段：已经知道了需要执行哪些改动，于是<strong>操作真实 DOM</strong> 完成节点的修改。</li></ol><p>其中，「找出变化 + 计算改动」这个过程就被叫做 <code>Reconciliation</code> (协调)。React 的协调算法可以在保证效率的同时，最大程度复用已有的 DOM，使得对 DOM 做出的修改尽量小。</p><p><img src="/react-unstable-nested-components/render-and-commit.png" alt="render-and-commit" /></p><p><em>▲ 图片来自：<a href="https://react.dev/learn/render-and-commit">Render and Commit – React</a></em></p><p>那么问题来了，React 怎么知道一个组件对应的 DOM 需要更新呢？</p><p>简单来说，React 在比较两棵 Fiber 树时，会从根节点开始递归遍历所有节点：</p><ol type="1"><li>如果节点类型和之前一致<ol type="1"><li>对于 DOM 元素，保持元素实例不变，仅更新有变化的属性</li><li>对于组件元素，需要重渲染的，使用新属性调用组件渲染方法</li></ol></li><li>如果节点类型有改变<ol type="1"><li>卸载该节点及其子节点 ⚠️</li><li>将对应的 DOM 元素标记为待删除</li><li>创建新的节点</li><li>将新的 DOM 元素标记为待插入</li></ol></li></ol><p>上面所说的子组件被卸载再挂载、状态丢失等问题，其实都是因为它们<strong>被判断为了「节点类型有改变」</strong>。</p><h2 id="引用相等性与组件重渲染"><a href="#引用相等性与组件重渲染" class="headerlink" title="引用相等性与组件重渲染"></a>引用相等性与组件重渲染</h2><p>在 JavaScript 中，比较值时有两种相等性：</p><ul><li><strong>值相等性</strong> (Value Equality)，即两个值类型一致，内容也一致</li><li><strong>引用相等性</strong> (Reference Equality)，即两个对象的引用在内存中指向同一块区域</li></ul><p>举个例子：</p><pre class="js"><code>// 两个长得一样的对象const a = &#123; name: &#39;Anon Tokyo&#39; &#125;;const b = &#123; name: &#39;Anon Tokyo&#39; &#125;;// &quot;引用相等性&quot; 比较 - falseconsole.log(a === b);console.log(Object.is(a, b));// &quot;值相等性&quot; 比较 - trueconsole.log(lodash.isEqual(a, b));console.log(a.name === b.name);</code></pre><p>JavaScript 函数也是对象，所以这对于函数（React 组件）也成立。</p><p>到这里问题就比较明朗了。</p><pre class="jsx"><code>function TodoList() &#123;  const [list, setList] = useState([]);  // WARN: 这个语句每次都会创建一个全新的 TodoItem 函数组件！  const TodoItem = (props) =&gt; &#123;    return &lt;li&gt;&#123;props.text&#125;&lt;/li&gt;;  &#125;;  return &lt;ul&gt;&#123;list.map((item, index) =&gt; &lt;TodoItem key=&#123;index&#125; text=&#123;item&#125; /&gt;)&#125;&lt;/ul&gt;;&#125;</code></pre><p>在这段代码中，每次 <code>&lt;TodoList/&gt;</code> 组件重渲染时（即 <code>TodoList</code> 函数被调用时），其内部创建的 <code>TodoItem</code> 都是一个全新的函数组件。</p><p>虽然它们长得一样，但它们的「引用相等性」是不成立的。</p><p>回到上一节介绍的渲染流程中，<a href="https://github.com/facebook/react/blob/v18.2.0/packages/react-reconciler/src/ReactChildFiber.new.js#L405">React 在比较节点的 <code>type</code> 时</a>，使用的是 <code>===</code> 严格相等。也就是说像上面那样不同的函数引用，<strong>会被视作不同的组件类型</strong>。进而导致在触发重渲染时，该组件的节点及其子节点全部被卸载，内部的状态也被全部丢弃。</p><h2 id="如果我用-usememo-包一下呢"><a href="#如果我用-usememo-包一下呢" class="headerlink" title="如果我用 useMemo 包一下呢"></a>如果我用 useMemo 包一下呢</h2><p>到这里我们已经介绍了「在组件内部嵌套定义组件」会造成问题的原理。</p><p>这时候可能就有小机灵鬼要问了，既然组件每次都被判断为是不同 <code>type</code> 的原因是对象引用不同，那我用 <code>useMemo</code> / <code>useCallback</code> Hooks，让它每次都返回相同的函数对象不就行了？</p><p>能考虑到这一层的都是爱动脑筋的同学，点个赞！让我们再来试验一下：</p><pre class="jsx"><code>function TodoList() &#123;  const [list, setList] = useState([]);  // useMemo 允许我们缓存一个值，每次重渲染时拿到的缓存是一样的  // 这里我们返回了一个函数组件，让 useMemo 把这个子组件的函数对象缓存下来  const TodoItem = useMemo(    () =&gt; (props) =&gt; &#123;      return &lt;li&gt;&#123;props.text&#125;&lt;/li&gt;;    &#125;,    []  );  // 或者用 useCallback 也可以，都一样  // const TodoItem = useCallback((props) =&gt; &#123;  //   return &lt;li&gt;&#123;props.text&#125;&lt;/li&gt;;  // &#125;, []);  const handleAdd = () =&gt; setList([...list, `Item $&#123;list.length + 1&#125;`]);  return (    &lt;div&gt;      &lt;button onClick=&#123;handleAdd&#125;&gt;Add&lt;/button&gt;      &lt;ul&gt;        &#123;list.map((item, index) =&gt; (          &lt;TodoItem key=&#123;index&#125; text=&#123;item&#125; /&gt;        ))&#125;      &lt;/ul&gt;    &lt;/div&gt;  );&#125;</code></pre><p><img src="/react-unstable-nested-components/nested-usememo.png" alt="nested-usememo" /></p><p>可以看到，包一层 <code>useMemo</code> 之后，子组件确实不会再被 unmount 了。看起来十分正常呢！</p><p>让我们再拿 <code>React.memo</code> 来包一下，在 <code>props</code> 相同时跳过不必要的重渲染：</p><pre class="jsx"><code>const TodoItem = useMemo(  () =&gt;    memo((props) =&gt; &#123;      return &lt;li&gt;&#123;props.text&#125;&lt;/li&gt;;    &#125;),  []);</code></pre><p><img src="/react-unstable-nested-components/nested-usememo-memo.png" alt="nested-usememo-memo" /></p><p>OHHHHHHHHH!!</p><p><a href="https://en.wikipedia.org/wiki/Duck_typing">如果一个东西看起来像鸭子，叫起来也像鸭子，那么它就是鸭子。</a></p><p>同理，如果我们通过一系列操作可以让「嵌套定义的 React 组件」在渲染时表现得与「在外层定义的组件」一致，那是不是就意味着这种操作其实也是 OK 的呢？</p><p>嗯……答案是：没那么简单。</p><blockquote><p>稍微偏个题，你可能会好奇 Hooks 和 memo 为什么也可以在嵌套定义的子组件内正常使用，因为这看起来和我们平时的用法完全不同。</p><p>实际上不管是模块顶层定义的函数组件，还是嵌套定义的函数组件，在 React Reconciler 看来都是独立的组件类型，且在渲染时都有着自己的 Fiber 节点来储存状态，而定义该函数的作用域是什么并不重要。想想看：HOC 高阶组件有时候也会返回内联定义的函数组件，其实是一个道理。</p></blockquote><h2 id="usememo-的缓存失效策略"><a href="#usememo-的缓存失效策略" class="headerlink" title="useMemo 的缓存失效策略"></a>useMemo 的缓存失效策略</h2><p><strong>第一点，<code>useMemo</code> 和 <code>useCallback</code> 的缓存并非完全可靠。</strong></p><p>在某些条件下，缓存的值会被 React 丢弃。如果缓存失效，函数组件就会被重新创建，同样会被判断为是不同的组件类型。React 官方肯定不会推荐你把 Hooks 用于这种歪门邪道的用途。</p><blockquote><p>In the future, React may add more features that take advantage of throwing away the cache—for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should be fine if you rely on useMemo solely as a performance optimization.</p><p>Ref: <a href="https://react.dev/reference/react/useMemo">useMemo – React</a></p></blockquote><p><strong>第二点，<code>useMemo</code> 和 <code>useCallback</code> 都有依赖数组。</strong></p><p>虽然上面的示例里嵌套组件定义的依赖数组都是空的，但是我们再想想，什么情况下会想要在组件内部定义子组件，而非将其拆成一个单独的组件呢？最主要的原因就是，这个子组件想要直接访问父组件函数作用域中的某些变量。</p><pre class="jsx"><code>function TodoList() &#123;  const [list, setList] = useState([]);  const TodoItem = useMemo(    () =&gt;      memo((props) =&gt; &#123;        // 注意看，这里子组件直接使用了父级作用域中的 list 变量        return &lt;li&gt;&#123;`$&#123;props.text&#125; of $&#123;list.length&#125;`&#125;&lt;/li&gt;;      &#125;),    [list.length]  );  const handleAdd = () =&gt; setList([...list, `Item $&#123;list.length + 1&#125;`]);  return (    &lt;div&gt;      &lt;button onClick=&#123;handleAdd&#125;&gt;Add&lt;/button&gt;      &lt;ul&gt;        &#123;list.map((item, index) =&gt; (          &lt;TodoItem key=&#123;index&#125; text=&#123;item&#125; /&gt;        ))&#125;      &lt;/ul&gt;    &lt;/div&gt;  );&#125;</code></pre><p><img src="/react-unstable-nested-components/nested-usememo-memo-deps.png" alt="nested-usememo-memo-deps" /></p><p>从实际测试中可以看到，有了依赖项的 <code>useMemo</code> + 嵌套组件，又退化成了最开始的样子，每次都会被当成不同的组件类型，每次都会被 unmount。之前所做的努力全部木大！（顺带一提用 <code>useRef</code> <a href="https://stackblitz.com/edit/react-unstable-nested-components?file=src%2Fcomponents%2F10-nested-useref.jsx">也是一样的</a>，有依赖就歇菜）</p><p>也就是说，只有你的嵌套子组件完全不依赖父组件作用域时，才能保证 <code>useMemo</code> 的缓存一直有效，才能做到完全不影响渲染性能。但既然都已经完全不依赖了，那么又还有什么理由一定要把它定义在父组件内部呢？</p><h2 id="重构包含嵌套组件的代码"><a href="#重构包含嵌套组件的代码" class="headerlink" title="重构包含嵌套组件的代码"></a>重构包含嵌套组件的代码</h2><p>所以我再重复一遍开头的结论：<strong>永远不要在 React 组件内部嵌套定义子组件。</strong></p><p>因为这在大部分情况下会造成渲染问题，即使对这种写法做优化也没有意义，因为一不留神就可能掉进坑里，还有可能会误导其他看到你的代码的人。</p><p>如果你的代码库中已经有了这样的 💩 代码，可以使用下面的方法重构。</p><p><strong>第一种方法，把子组件移到最外层去。</strong></p><p>这种方法适用于子组件依赖项不多的情况，如果有之前直接使用的父级作用域中的变量，可以将其改造为 <code>props</code> 传入的方式。</p><pre class="jsx"><code>// 组件定义移到模块顶层const TodoItem = memo((props) =&gt; &#123;  return &lt;li&gt;&#123;`$&#123;props.text&#125; of $&#123;props.listLength&#125;`&#125;&lt;/li&gt;;&#125;);function TodoList() &#123;  const [list, setList] = useState([&#39;Item 1&#39;]);  const handleAdd = () =&gt; setList([...list, `Item $&#123;list.length + 1&#125;`]);  return (    &lt;div&gt;      &lt;button onClick=&#123;handleAdd&#125;&gt;Add&lt;/button&gt;      &lt;ul&gt;        &#123;list.map((item, index) =&gt; (          // 改造后：从 props 传入原来的依赖项          &lt;TodoItem key=&#123;index&#125; text=&#123;item&#125; listLength=&#123;list.length&#125; /&gt;        ))&#125;      &lt;/ul&gt;    &lt;/div&gt;  );&#125;</code></pre><p><strong>第二种方法，把子组件改为渲染函数 (Render Function)。</strong></p><p>JSX 的本质就是 <code>React.createElement(type)</code>，React 节点的本质其实就是一个 JavaScript 对象。你在组件 <code>return</code> 语句中直接写 JSX，和定义一个函数返回 JSX 然后再调用这个函数，本质上是一样的。</p><pre class="jsx"><code>function TodoList() &#123;  const [list, setList] = useState([]);  // 这不是函数组件，只是一个「返回 JSX 的函数」（函数名首字母非大写）  // 所以每次渲染都重新创建也没问题，也可以直接访问作用域内的变量  const renderTodoItem = (key, text) =&gt; &#123;    return &lt;li key=&#123;key&#125;&gt;&#123;`$&#123;text&#125; of $&#123;list.length&#125;`&#125;&lt;/li&gt;;  &#125;;  const handleAdd = () =&gt; setList([...list, `Item $&#123;list.length + 1&#125;`]);  return (    &lt;div&gt;      &lt;button onClick=&#123;handleAdd&#125;&gt;Add&lt;/button&gt;      &#123;/* 调用的时候也和调用普通函数一样，而非组件的标签形式 */&#125;      &lt;ul&gt;&#123;list.map((item, index) =&gt; renderTodoItem(index, item))&#125;&lt;/ul&gt;    &lt;/div&gt;  );&#125;</code></pre><p>不过需要注意的是，在使用「渲染函数」时，一定要搞清楚和「函数组件」的区别：</p><ul><li>渲染函数虽然和组件一样都返回 JSX，但它不是组件；</li><li>渲染函数就是普通 JavaScript 函数，没有状态，也没有对应的 Fiber 节点；</li><li>渲染函数只是当前组件的一部分，对于 React 渲染来说没有额外开销；</li><li>渲染函数内部不能使用 Hooks，只有组件内部才能使用 Hooks；</li><li>渲染函数命名一般以 <code>render</code> 开头，首字母小写（否则容易和组件搞混）。</li></ul><p>另外，当渲染函数作为 <code>props</code> 传入其他组件时，它也被叫做<a href="https://legacy.reactjs.org/docs/render-props.html">渲染属性 (Render Props)</a>。这种设计模式在 React 生态中有着大量的应用，可以放心使用。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后聊一下，如何避免这类问题的发生。</p><p><strong>第一，配置 Lint 规则。</strong></p><p>防范于未然，合理的 Lint 配置可以减少起码 80% 的代码规范问题。比如本文介绍的坑，其实完全可以通过 <a href="https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md"><code>react/no-unstable-nested-components</code></a> + <a href="https://github.com/xgbuils/eslint-plugin-react-rfc/blob/main/docs/rules/no-component-def-in-render.md"><code>react-rfc/no-component-def-in-render</code></a> 规则提前规避。</p><p>最好再配合代码提交后的 CI 卡点检查，有效避免因开发者环境配置不当或者偷摸跳过检查，导致规则形同虚设的情况。</p><p><strong>第二，定期 Code Review。</strong></p><p>代码腐化是难以避免的，但我们可以通过流程和规范提早暴露、纠正问题，减缓腐化的速度。Code Review 同时也是一个知识共享、学习和成长的过程，对于 reviewer 和 reviewee 来说都是。</p><p>没有人一开始就什么都会，大家都是在不断的学习中成长起来的。</p><p><strong>第三，了解一些 React 的原理与内部实现。</strong></p><p>因为我自己就是吃这碗饭的，之前写过 React 的 Custom Renderer，也做过渲染性能优化，所以底层原理看的比较多，自然也就知道什么样的代码对性能会有影响。</p><p>我一直以来秉持的观点就是，学习框架时也要学习它「引擎盖下」的东西，知其然且知其所以然。如果你希望在这条路上一直走下去，相信这一定会对你有所帮助。</p><hr /><p>扩展阅读：</p><ul><li><a href="https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/">A (Mostly) Complete Guide to React Rendering Behavior</a></li><li><a href="https://jser.dev/2023-07-14-initial-mount/">How does React do the initial mount internally?</a></li><li><a href="https://github.com/jsx-eslint/eslint-plugin-react/issues/2749">Rule proposal: react/no-unstable-nested-components</a></li><li><a href="https://github.com/jsx-eslint/eslint-plugin-react/issues/3208">Rule to forbid calling components as functions?</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在 Code Review 时，看到有同事写了这样的代码：&lt;/p&gt;
&lt;pre class=&quot;jsx&quot;&gt;&lt;code&gt;function TodoList() &amp;#123;
  const [list, setList] = useState([]);

  const TodoItem = useCallback((props) =&amp;gt; &amp;#123;
    return &amp;lt;li&amp;gt;&amp;#123;props.text&amp;#125;&amp;lt;/li&amp;gt;;
  &amp;#125;, []);

  return &amp;lt;ul&amp;gt;&amp;#123;list.map((item, index) =&amp;gt; &amp;lt;TodoItem key=&amp;#123;index&amp;#125; text=&amp;#123;item&amp;#125; /&amp;gt;)&amp;#125;&amp;lt;/ul&amp;gt;;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有经验的 React 开发者肯定一下子就看出问题了：&lt;strong&gt;在组件内部嵌套定义组件，会导致子组件每次都重新挂载&lt;/strong&gt;。因为每次渲染时，创建的函数组件其实都是不同的对象。&lt;/p&gt;
&lt;p&gt;但是他又有包了 &lt;code&gt;useCallback&lt;/code&gt; 让引用保持一致，好像又没什么问题……？&lt;/p&gt;
&lt;p&gt;这波骚操作让我突然有点拿不准了，所以今天咱们一起来验证一下，用 &lt;code&gt;useMemo&lt;/code&gt; 或者 &lt;code&gt;useCallback&lt;/code&gt; 包裹嵌套定义的子组件，对 React 渲染会有什么影响。以及如果有影响，应该如何用更合适的方法重构。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="前端" scheme="https://prinsss.github.io/tag/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://prinsss.github.io/tag/React/"/>
    
  </entry>
  
  <entry>
    <title>使用 TikZ 在 Hexo 博客中愉快地画图</title>
    <link href="https://prinsss.github.io/graphics-with-tikz-in-hexo/"/>
    <id>https://prinsss.github.io/graphics-with-tikz-in-hexo/</id>
    <published>2024-01-15T20:00:00.000Z</published>
    <updated>2024-01-15T20:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一转眼就到 2024 年了！大家新年快乐！</p><p>前段时间在写文章时，需要一些配图，于是就使用了 <a href="https://tikz.dev">Ti<em>k</em>Z</a> 来绘制。Ti<em>k</em>Z 是一个强大的 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 宏包，可以使用代码的形式绘制出各种各样精美的矢量图。</p><!-- tikzjax-placeholder-5c944dfdf3c0f3db7fa1b0e3370ebcb2 --><details><summary>如果你的阅读器看不到上面的 SVG 格式图片，可以点这里查看 <a href="https://prinsss.github.io/graphics-with-tikz-in-hexo/example-tikz-graph.png">PNG</a> 格式。</summary><img src="/graphics-with-tikz-in-hexo/example-tikz-graph.png" alt="example-tikz-graph"></details><p>上面的图对应的 Ti<em>k</em>Z 代码可以在<a href="https://github.com/prinsss/node-tikzjax/tree/main/demo">这里</a>找到。然而画是画爽了，想把它贴到博客里时却犯了难——目前竟然没有什么好办法可以直接在博客里使用 Ti<em>k</em>Z！</p><span id="more"></span><h2 id="tldr"><a href="#tldr" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>咱们废话不多说，直接上结果：我写了一个 Hexo 插件，可以直接把 Markdown 源码里的 Ti<em>k</em>Z 代码渲染成 SVG 矢量图，然后在博客构建时嵌入到页面 HTML 中，用起来就和 MathJax 写数学公式一样简单。</p><p>而且最重要的是渲染完全在构建时完成，浏览器上无需运行任何 JavaScript。同时构建机上也无需安装 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 环境，因为其底层运行的是 WebAssembly。</p><p>👉 <a href="https://github.com/prinsss/hexo-filter-tikzjax">prinsss/hexo-filter-tikzjax: Server side PGF/TikZ renderer plugin for Hexo.</a></p><pre><code>npm install hexo-filter-tikzjax</code></pre><p><strong>注意：插件安装成功后，需要运行 <code>hexo clean</code> 清除已有的缓存。</strong></p><p>安装插件后，只需要在博客文章中添加 Ti<em>k</em>Z 代码块：</p><!-- Here is a zero-width space to escape. --><pre class="markdown"><code>---title: '使用 TikZ 在 Hexo 博客中愉快地画图'tikzjax: true---Markdown text here...```​​tikz\begin{document}  \begin{tikzpicture}    % Your TikZ code here...    % The graph below is from https://tikz.dev/library-3d  \end{tikzpicture}\end{document}```</code></pre><p>插件就会自动把代码渲染成对应的图片，非常方便：</p><!-- tikzjax-placeholder-e52e1c34a713af26a3059f6603fb0db2 --><h2 id="tikz-教程"><a href="#tikz-教程" class="headerlink" title="TikZ 教程"></a>Ti<em>k</em>Z 教程</h2><p>不做过多介绍。贴几个链接，有兴趣的可以学学：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/48300815">[LaTeX 绘图指南 - 001] TikZ 的简介、资源以及学习方法 - 知乎</a></li><li><a href="https://github.com/Hansimov/pgfmanual-zh">Hansimov/pgfmanual-zh: PGF/TikZ 中文手册</a></li><li><a href="https://tikz.dev/">PGF/TikZ Manual - Complete Online Documentation</a></li><li><a href="https://github.com/xiaohanyu/awesome-tikz">xiaohanyu/awesome-tikz: A curated list of awesome TikZ documentations, libraries and resources</a></li></ul><p>比如这就是我在写文章时画的图，全部用 Ti<em>k</em>Z 代码生成，画起来改起来都很方便。</p><!-- tikzjax-placeholder-8e99ef9029297748ccba7bbb9704d1ef --><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="25.965ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 11476.5 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D40C" d="M314 0Q296 3 181 3T48 0H39V62H147V624H39V686H305Q316 679 323 667Q330 653 434 414L546 157L658 414Q766 662 773 674Q778 681 788 686H1052V624H944V62H1052V0H1040Q1016 3 874 3T708 0H696V62H804V341L803 618L786 580Q770 543 735 462T671 315Q540 13 536 9Q528 1 507 1Q485 1 477 9Q472 14 408 162T281 457T217 603Q215 603 215 334V62H323V0H314Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1125,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(936,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1297,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1826,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2187,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(3051,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(1333.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944,0)"></path></g><g data-mml-node="mo" transform="translate(1338,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1504.7,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g></g><g data-mml-node="mtd" transform="translate(3100.7,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(944.7,0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672,0)"></path></g><g data-mml-node="mo" transform="translate(2172.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(2339.3,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(55,0)"><g data-mml-node="mi"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672,0)"></path></g><g data-mml-node="mo" transform="translate(1228,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1394.7,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g></g><g data-mml-node="mtd" transform="translate(3518,0)"><g data-mml-node="mi"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944,0)"></path></g><g data-mml-node="mo" transform="translate(1338,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1504.7,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(6564,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g></g></g></g></g></g></svg></mjx-container></span></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在本插件之前，主流的在网页上渲染 Ti<em>k</em>Z 绘图的方式是使用 <a href="https://tikzjax.com">Ti<em>k</em>ZJax</a>。Ti<em>k</em>ZJax 有点类似 <a href="https://www.mathjax.org">MathJax</a>，都是通过 JavaScript 去渲染 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 语法。</p><pre class="html"><code>&lt;link rel="stylesheet" type="text/css" href="https://tikzjax.com/v1/fonts.css"&gt;&lt;script src="https://tikzjax.com/v1/tikzjax.js"&gt;&lt;/script&gt;&lt;script type="text/tikz"&gt;  \begin{tikzpicture}    \draw (0,0) circle (1in);  \end{tikzpicture}&lt;/script&gt;</code></pre><p>然而这样做的问题是，太重了。在网页上动态加载 Ti<em>k</em>ZJax，需要加载 955KB 的 JavaScript + 454KB 的 WebAssembly + 1.1MB 的内存数据，如果再<a href="https://github.com/artisticat1/tikzjax/tree/output-single-file/tex_files">另外安装一些宏包</a>，最终打包产物大小甚至可以达到 5MB+。</p><p>对于一些有加载性能要求的网站，这显然是难以接受的。</p><p>那怎么办呢？答案就是 <abbr title="Server Side Rendering">SSR</abbr> / <abbr title="Static Site Generation">SSG</abbr>，把渲染过程搬到服务端/构建时去做。这很适合博客这样的场景，尤其是静态博客，只需要构建时渲染一下，把生成的图片塞到 HTML 里就完事了，完全不需要客户端 JavaScript 参与，加载速度大幅提升。</p><p>因为 Ti<em>k</em>ZJax 底层跑的是 WebAssembly，而 Node.js 也支持运行 <a href="https://nodejs.org/en/learn/getting-started/nodejs-with-webassembly">WebAssembly</a>，所以很自然地我就想，能不能把它的渲染流程直接搬到 Node.js 里面去做？</p><p>说干就干。于是就有了 <a href="https://github.com/prinsss/node-tikzjax">node-tikzjax</a>，一个 Ti<em>k</em>ZJax 的移植版，可以在纯 Node.js 环境下运行，无需安装第三方依赖或者 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 环境。轻量化的特性很适合拿来做服务端渲染，也支持在 Cloudflare Worker 等 Runtime 上运行，非常好用。</p><p><a href="https://github.com/prinsss/hexo-filter-tikzjax">hexo-filter-tikzjax</a> 则是 node-tikzjax 的一个上层封装，主要就是在渲染 Hexo 博客文章时提取 Markdown 源码中的 Ti<em>k</em>Z 代码，交给 node-tikzjax 执行并渲染出 SVG 图片，然后将其内联插入到最终的 HTML 文件中。</p><p>如果是其他博客框架，也可以用类似的原理实现 Ti<em>k</em>Z 静态渲染的接入。</p><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>因为 <a href="https://github.com/prinsss/node-tikzjax">node-tikzjax</a> 并不是完整的 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 环境，所以不是所有宏包都可以使用。目前支持在 <code>\usepackage{}</code> 中直接使用的宏包有：</p><ul><li>chemfig</li><li>tikz-cd</li><li>circuitikz</li><li>pgfplots</li><li>array</li><li>amsmath</li><li>amstext</li><li>amsfonts</li><li>amssymb</li><li>tikz-3dplot</li></ul><p>如果希望添加其他宏包，可以参考 <a href="https://github.com/prinsss/node-tikzjax/blob/v1.0.3/src/bootstrap.ts#L182">extractTexFilesToMemory</a> 这里的代码添加。</p><p>如果在使用插件的过程中 Ti<em>k</em>Z 代码编译失败了，可以通过 <code>hexo s --debug</code> 或者 <code>hexo g --debug</code> 开启调试模式，查看 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 引擎的输出排查问题：</p><pre class="plaintext"><code>This is e-TeX, Version 3.14159265-2.6 (preloaded format=latex 2022.5.1)**entering extended mode(input.texLaTeX2e &lt;2020-02-02&gt; patch level 2("tikz-cd.sty" (tikzlibrarycd.code.tex (tikzlibrarymatrix.code.tex)(tikzlibraryquotes.code.tex) (pgflibraryarrows.meta.code.tex)))No file input.aux.ABD: EveryShipout initializing macros [1] [2] (input.aux) )Output written on input.dvi (2 pages, 25300 bytes).Transcript written on input.log.</code></pre><p>或者也可以在这个 <a href="https://stackblitz.com/edit/node-tikzjax">Live Demo</a> 中输入你的 Ti<em>k</em>Z 代码，提交后可在控制台查看报错。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>首先要感谢 <span class="citation" data-cites="kisonecat">@kisonecat</span> 开发的 <a href="https://github.com/kisonecat/web2js">web2js</a> 项目，这是一个 Pascal 到 WebAssembly 的编译器，使我们可以在 JavaScript 中运行 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 引擎，也是下面所有项目的基石。</p><p>这里有作者关于构建基于 Web 的 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 引擎的一篇文章，可以拜读一下：<a href="https://www.tug.org/TUGboat/tb40-1/tb124fowler-js.pdf">Both TEX and DVI viewers inside the web browser</a>。</p><p>感谢 <span class="citation" data-cites="drgrice1">@drgrice1</span> 对 Ti<em>k</em>ZJax 和 dvi2html 的修改，TA 的 <a href="https://github.com/drgrice1/tikzjax/tree/ww-modifications">fork</a> 中包含了很多有用的新功能，并且修复了一些原始代码中的问题。</p><p>感谢 <span class="citation" data-cites="artisticat1">@artisticat1</span> 对 Ti<em>k</em>ZJax 的修改，这是基于上述 <span class="citation" data-cites="drgrice1">@drgrice1</span> 的 fork 的又一个 <a href="https://github.com/artisticat1/tikzjax/tree/output-single-file">fork</a>，也添加了一些有用的功能。本插件依赖的 node-tikzjax，其底层使用的 WebAssembly 二进制和其他文件就是从这个仓库中获取的。</p><p>感谢 <span class="citation" data-cites="artisticat1">@artisticat1</span> 开发的 <a href="https://github.com/artisticat1/obsidian-tikzjax">obsidian-tikzjax</a> 插件，这是本项目的灵感来源。本项目和该插件底层共享同一套 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span> 引擎，使用语法也很类似，基本可以在 Obsidian 和 Hexo 之间无缝切换（实际上也是我开发这个的原因 😹）。</p><p>如有任何问题，请在 GitHub 上提交 <a href="https://github.com/prinsss/hexo-filter-tikzjax/issues">issue</a>。祝使用愉快！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一转眼就到 2024 年了！大家新年快乐！&lt;/p&gt;
&lt;p&gt;前段时间在写文章时，需要一些配图，于是就使用了 &lt;a href=&quot;https://tikz.dev&quot;&gt;Ti&lt;em&gt;k&lt;/em&gt;Z&lt;/a&gt; 来绘制。Ti&lt;em&gt;k&lt;/em&gt;Z 是一个强大的 &lt;span class=&quot;math inline&quot;&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.488ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;6.293ex&quot; height=&quot;2.108ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -716.3 2781.3 931.8&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D43F&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mspace&quot; transform=&quot;translate(681,0)&quot;&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mpadded&quot; transform=&quot;translate(356,0)&quot;&gt;&lt;g transform=&quot;translate(0,210)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot; transform=&quot;scale(0.707)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D434&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mspace&quot; transform=&quot;translate(886.3,0)&quot;&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(716.3,0)&quot;&gt;&lt;path data-c=&quot;1D447&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mspace&quot; transform=&quot;translate(1420.3,0)&quot;&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mpadded&quot; transform=&quot;translate(1280.3,0)&quot;&gt;&lt;g transform=&quot;translate(0,-215.5)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D438&quot; d=&quot;M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mspace&quot; transform=&quot;translate(2044.3,0)&quot;&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1929.3,0)&quot;&gt;&lt;path data-c=&quot;1D44B&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/span&gt; 宏包，可以使用代码的形式绘制出各种各样精美的矢量图。&lt;/p&gt;
&lt;!-- tikzjax-placeholder-5c944dfdf3c0f3db7fa1b0e3370ebcb2 --&gt;
&lt;details&gt;
&lt;summary&gt;
如果你的阅读器看不到上面的 SVG 格式图片，可以点这里查看 &lt;a href=&quot;https://prinsss.github.io/graphics-with-tikz-in-hexo/example-tikz-graph.png&quot;&gt;PNG&lt;/a&gt; 格式。
&lt;/summary&gt;
&lt;img src=&quot;/graphics-with-tikz-in-hexo/example-tikz-graph.png&quot; alt=&quot;example-tikz-graph&quot;&gt;
&lt;/details&gt;
&lt;p&gt;上面的图对应的 Ti&lt;em&gt;k&lt;/em&gt;Z 代码可以在&lt;a href=&quot;https://github.com/prinsss/node-tikzjax/tree/main/demo&quot;&gt;这里&lt;/a&gt;找到。然而画是画爽了，想把它贴到博客里时却犯了难——目前竟然没有什么好办法可以直接在博客里使用 Ti&lt;em&gt;k&lt;/em&gt;Z！&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="Hexo" scheme="https://prinsss.github.io/tag/Hexo/"/>
    
    <category term="LaTeX" scheme="https://prinsss.github.io/tag/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>详解 PixiJS Filter 中的参数与坐标系</title>
    <link href="https://prinsss.github.io/pixijs-filter-coordinate-systems/"/>
    <id>https://prinsss.github.io/pixijs-filter-coordinate-systems/</id>
    <published>2023-11-03T13:35:00.000Z</published>
    <updated>2023-11-03T13:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>除草啦除草啦，再不更新博客就要变成热带雨林啦！🌿</p><p>最近在给一个 PixiJS 程序编写 WebGL Shader，被各种参数和坐标系搞得晕头转向。痛定思痛，整理了一下 PixiJS Filter 系统中的各种概念，以供后续参阅。</p><p>在 WebGL 中，我们可以通过编写顶点着色器 (Vertex Shader) 和片元着色器 (Fragment Shader) 来实现各种各样的渲染效果。而在 <a href="https://pixijs.com/">PixiJS</a> 中，渲染引擎为我们屏蔽了绝大多数的底层实现，通常情况下用户是不需要自己调用 WebGL API 的。如果有编写自定义着色器代码的需求，一般是使用 <a href="https://pixijs.download/dev/docs/PIXI.Filter.html">Filter</a> 来实现。</p><span id="more"></span><h2 id="pixijs-filter-是什么"><a href="#pixijs-filter-是什么" class="headerlink" title="PixiJS Filter 是什么"></a>PixiJS Filter 是什么</h2><p><code>PIXI.Filter</code> 其实就是一个 WebGL 着色程序，即一组顶点着色器 + 片元着色器的封装。和 Photoshop 中的滤镜功能类似，它接受一个纹理 (Texture) 输入，然后将处理后的内容输出到 Framebuffer 中。使用滤镜，可以实现模糊、扭曲、水波、烟雾等<a href="https://filters.pixijs.download/main/demo/index.html">高级特效</a>。</p><p>用户只需要定义着色器的 GLSL 代码，传入对应的参数，剩下的工作就全部交给 PixiJS 完成。如果你对这些概念不太熟悉，可以看看：<a href="https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-shaders-and-glsl.html">WebGL 着色器和 GLSL</a>。</p><h2 id="默认的-filter-着色器代码"><a href="#默认的-filter-着色器代码" class="headerlink" title="默认的 Filter 着色器代码"></a>默认的 Filter 着色器代码</h2><p>在 PixiJS 中，Filter 自带了一组默认的顶点着色器和片元着色器代码。用户在定义 Filter 时，如果省略了其中一个，就会使用默认的着色器代码运行。</p><pre class="js"><code>new Filter(undefined, fragShader, myUniforms); // default vertex shadernew Filter(vertShader, undefined, myUniforms); // default fragment shadernew Filter(undefined, undefined, myUniforms);  // both default</code></pre><p>这是 Filter 默认的<a href="https://github.com/pixijs/pixijs/blob/v7.3.2/packages/core/src/filters/defaultFilter.vert">顶点着色器代码</a>：</p><pre class="glsl"><code>attribute vec2 aVertexPosition;uniform mat3 projectionMatrix;varying vec2 vTextureCoord;uniform vec4 inputSize;uniform vec4 outputFrame;vec4 filterVertexPosition(void){    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);}vec2 filterTextureCoord(void){    return aVertexPosition * (outputFrame.zw * inputSize.zw);}void main(void){    gl_Position = filterVertexPosition();    vTextureCoord = filterTextureCoord();}</code></pre><p>这是默认的<a href="https://github.com/pixijs/pixijs/blob/v7.3.2/packages/core/src/filters/defaultFilter.frag">片元着色器代码</a>：</p><pre class="glsl"><code>varying vec2 vTextureCoord;uniform sampler2D uSampler;void main(void){    gl_FragColor = texture2D(uSampler, vTextureCoord);}</code></pre><p>看着一脸懵逼不要紧，下面我们逐一解释。</p><h2 id="webgl-知识回顾"><a href="#webgl-知识回顾" class="headerlink" title="WebGL 知识回顾"></a>WebGL 知识回顾</h2><p>先来复习一下 WebGL <a href="https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-fundamentals.html">基础知识</a>。</p><ul><li><strong>WebGL</strong> - 基于 OpenGL ES 的图形渲染 API，可根据代码绘制点、线和三角形</li><li><strong>着色器 (Shader)</strong> - 运行在 GPU 上的代码，一种将输入转换为输出的程序</li><li><strong>GLSL</strong> - 专门用于编写着色器的语言，语法类似 C 语言</li><li><strong>顶点 (Vertex)</strong> - 一个 2D/3D 坐标的数据集合，表示空间中的一个点</li><li><strong>顶点着色器 (Vertex Shader)</strong> - 处理顶点数据，生成裁剪空间坐标值</li><li><strong>片元 (Fragment)</strong> - 也叫片段，包含了渲染一个像素所需的所有数据</li><li><strong>片元着色器 (Fragment Shader)</strong> - 计算当前光栅化的像素的颜色值</li><li><strong>参数</strong> - 着色器中获取数据的方法，主要有：attribute、uniform、texture、varying</li></ul><p><img src="/pixijs-filter-coordinate-systems/pipeline.png" alt="pipeline"></p><p><em>▲ OpenGL 图形渲染管线的流程。插图来自 <a href="https://learnopengl.com/Getting-started/Hello-Triangle">LearnOpenGL</a></em></p><blockquote><p>不太熟悉的同学可能会以为 WebGL 是 3D 渲染 API，但其实 WebGL 本身只是一个光栅化引擎，并没有提供什么 3D 功能。如果想要实现 3D 渲染，你需要将模型中的三维坐标点转换为裁剪空间的二维坐标，并提供对应的颜色。WebGL 负责将这些图元绘制到屏幕上，仅此而已。</p><p>试想：任何 3D 模型，不管怎样旋转、缩放、平移，最终展示到你的屏幕上，都是 2D 的。同样，不管模型上有什么贴图、光照、阴影、反射，最终改变的其实都是这个像素的颜色值。</p></blockquote><p>再来复习一下 WebGL 中的坐标系统：</p><ul><li><strong>局部坐标 (Local Coordinate)</strong><ul><li>或称模型坐标，对应局部空间</li><li>一个物体中的点相对于该物体原点的局部坐标</li></ul></li><li><strong>世界坐标 (World Coordinate)</strong><ul><li>对应世界空间</li><li>局部坐标相对于世界原点的坐标，把物体放到整个世界中去看</li></ul></li><li><strong>观察坐标 (View Coordinate)</strong><ul><li>对应观察空间</li><li>从摄像机/人眼的角度去观察世界，所看到的物体相对于观察者的坐标</li><li>同一个世界坐标，从不同的距离、角度、视野去观察，得到的观察坐标也不同</li></ul></li><li><strong>裁剪坐标 (Clip Coordinate)</strong><ul><li>对应裁剪空间</li><li>将观察空间内超出一定范围的坐标点都裁剪掉，只保留一定范围内的坐标</li><li>任何超过这个范围的点都不会显示在你的屏幕上</li><li>从观察坐标转换为裁剪坐标的过程，称作投影变换 (Projection)</li></ul></li><li><strong>标准化设备坐标 (Normalized Device Coordinate, NDC)</strong><ul><li>将裁剪空间的坐标值范围映射到 <code>[-1, 1]</code> 范围之间，即为 NDC</li><li>坐标 <code>(0, 0)</code> 位于裁剪空间的正中间，左下角为 <code>(-1, -1)</code>，右上角为 <code>(1, 1)</code></li></ul></li><li><strong>屏幕坐标 (Screen Coordinate)</strong><ul><li>对应屏幕空间</li><li>将标准化设备坐标映射到屏幕坐标的过程，称做视口变换</li></ul></li><li><strong>纹理坐标 (Texture Coordinates)</strong><ul><li>即纹理图像上的坐标</li><li>纹理坐标与像素坐标不同，无论纹理是什么尺寸，纹理坐标范围始终是 <code>[0, 1]</code></li><li>纹理图像的左下角坐标为 <code>(0, 0)</code>，右上角坐标为 <code>(1, 1)</code></li></ul></li></ul><p><img src="/pixijs-filter-coordinate-systems/coordinate-systems.png" alt="coordinate-systems"></p><p><em>▲ 各种坐标与变换矩阵的关系。插图来自 <a href="https://learnopengl.com/Getting-started/Coordinate-Systems">LearnOpenGL</a></em></p><h2 id="filter-中的几种坐标系"><a href="#filter-中的几种坐标系" class="headerlink" title="Filter 中的几种坐标系"></a>Filter 中的几种坐标系</h2><p>下面介绍 <a href="https://github.com/pixijs/pixijs/wiki/v5-Creating-filters">PixiJS Filter 中的坐标系</a>，以及它们和 WebGL 坐标系之间的关系。</p><h3 id="input-coordinate"><a href="#input-coordinate" class="headerlink" title="Input Coordinate"></a>Input Coordinate</h3><p>输入坐标，用于表示传入 FilterSystem 的纹理上的坐标。</p><p>Normalized Input Coordinate 是标准化之后的输入坐标，即<strong>纹理坐标</strong>，范围是 <code>[0, 1]</code>。</p><h3 id="screen-coordinate"><a href="#screen-coordinate" class="headerlink" title="Screen Coordinate"></a>Screen Coordinate</h3><p>相对于 canvas 视口的<strong>屏幕坐标</strong>，单位是 CSS 像素。</p><p>CSS 像素乘以分辨率 <code>resolution</code> 即为屏幕物理像素。</p><h3 id="filter-coordinate"><a href="#filter-coordinate" class="headerlink" title="Filter Coordinate"></a>Filter Coordinate</h3><p>滤镜坐标，即被 Filter 所覆盖的范围内的<strong>局部坐标</strong>，单位是 CSS 像素。</p><p>Normalized Filter Coordinate 是标准化之后的滤镜坐标，滤镜覆盖范围的左上角坐标是 <code>(0, 0)</code>，右下角坐标是 <code>(1, 1)</code>。</p><h3 id="sprite-texture-coordinate"><a href="#sprite-texture-coordinate" class="headerlink" title="Sprite Texture Coordinate"></a>Sprite Texture Coordinate</h3><p>额外的图片纹理坐标。可以用于采样其他输入中的纹理。</p><p><a href="https://filters.pixijs.download/main/demo/index.html?enabled=DisplacementFilter">Demo: DisplacementFilter</a></p><h3 id="sprite-atlas-coordinate"><a href="#sprite-atlas-coordinate" class="headerlink" title="Sprite Atlas Coordinate"></a>Sprite Atlas Coordinate</h3><p>额外的精灵图集纹理坐标。</p><h2 id="filter-的输入参数"><a href="#filter-的输入参数" class="headerlink" title="Filter 的输入参数"></a>Filter 的输入参数</h2><p>讲完坐标的种类，下面介绍 Filter 着色器代码中传入的各个参数（attributes、uniform、varying）分别代表什么，对应的是什么坐标系，以及它们的取值分别是多少。</p><blockquote><p>⚠️ 以下参数适用于 PixiJS v7 版本，不排除后续版本中有变动的可能。</p></blockquote><h3 id="avertexposition"><a href="#avertexposition" class="headerlink" title="aVertexPosition"></a>aVertexPosition</h3><ul><li>类型：<code>vec2</code> 二维向量</li><li>含义：Filter 所覆盖的范围内的标准化坐标</li><li>坐标系：Normalized Filter Coordinate</li><li>取值范围：0.0 ~ 1.0</li></ul><p>假设有一个长宽为 300x300 的<strong>矩形 A</strong>，其原点左上角位于 (100, 30) 世界坐标处。则有：</p><ul><li>aVertexPosition <code>(0.0, 0.0)</code> 对应矩形左上角</li><li>aVertexPosition <code>(1.0, 1.0)</code> 对应矩形右下角</li></ul><h3 id="projectionmatrix"><a href="#projectionmatrix" class="headerlink" title="projectionMatrix"></a>projectionMatrix</h3><ul><li>类型：<code>mat3</code> 3x3 矩阵</li><li>含义：投影矩阵，用于将观察空间坐标变换到裁剪空间坐标</li></ul><p>具体是怎么变换的，请阅读本文底部的「投影矩阵」章节。</p><h3 id="inputsize"><a href="#inputsize" class="headerlink" title="inputSize"></a>inputSize</h3><ul><li>类型：<code>vec4</code> 四维向量</li><li>含义：输入 filter 的临时 framebuffer 大小</li><li>坐标系：Input Coordinate</li><li>取值范围：长宽 &gt; 0，单位 CSS 像素</li></ul><p>假设有一个大小为 512x512 的 framebuffer，则 inputSize 的值为：</p><pre class="glsl"><code>vec4(512, 512, 0.0020, 0.0020)</code></pre><p>其中，前两个分量 <code>x, y</code> 为像素大小，后两个分量 <code>z, w</code> 是像素大小的倒数。倒数可用于将除法转换为乘法，因为乘以一个数的倒数等于除以这个数。</p><p>以下两个表达式是等价的：</p><pre class="glsl"><code>aVertexPosition * (outputFrame.zw * inputSize.zw);aVertexPosition * (outputFrame.zw / inputSize.xy);</code></pre><p>但是在计算机中，乘法比除法的<a href="https://stackoverflow.com/questions/12977050/what-has-a-better-performance-multiplication-or-division">计算速度更快</a>。所以在 GLSL 着色器这类需要高速运行的代码中，通常会尽量<a href="https://www.khronos.org/opengl/wiki/GLSL_Optimizations">避免直接使用除法</a>，而使用倒数乘法替代。</p><h3 id="outputframe"><a href="#outputframe" class="headerlink" title="outputFrame"></a>outputFrame</h3><ul><li>类型：<code>vec4</code> 四维向量</li><li>含义：Filter 所覆盖的区域在屏幕坐标中的位置与大小</li><li>坐标系：Screen Coordinate</li><li>取值范围：位置不限，长宽 &gt; 0，单位 CSS 像素</li></ul><p>还是以矩形 A 为例，其 outputFrame 取值为：</p><pre class="glsl"><code>vec4(100, 30, 300, 300)</code></pre><p>其中，前两个分量 <code>x, y</code> 为输出区域的位置，后两个分量 <code>z, w</code> 为输出区域的长宽。</p><h3 id="vtexturecoord"><a href="#vtexturecoord" class="headerlink" title="vTextureCoord"></a>vTextureCoord</h3><ul><li>类型：<code>vec4</code> 四维向量</li><li>含义：用于采样输入 filter 的临时 framebuffer 的纹理坐标</li><li>坐标系：Normalized Input Coordinate</li><li>取值范围：0.0 ~ 1.0</li></ul><h3 id="usampler"><a href="#usampler" class="headerlink" title="uSampler"></a>uSampler</h3><ul><li>类型：<code>sampler2D</code> 纹理</li><li>含义：输入 filter 的纹理图像，可配合 vTextureCoord 纹理坐标进行采样</li></ul><h3 id="inputpixel"><a href="#inputpixel" class="headerlink" title="inputPixel"></a>inputPixel</h3><ul><li>类型：<code>vec4</code> 四维向量</li><li>含义：输入 filter 的临时 framebuffer 物理像素大小</li><li>坐标系：Input Coordinate</li><li>取值范围：长宽 &gt; 0，单位物理像素</li></ul><p>和 inputSize 类似，但是单位不是 CSS 像素，而是物理像素。以下两个表达式等价：</p><pre class="glsl"><code>inputPixel.xyinputSize.xy * resolution</code></pre><p>同样地，<code>inputPixel.zw</code> 是 <code>inputPixel.xy</code> 的倒数，用于转换除法为乘法。</p><h3 id="inputclamp"><a href="#inputclamp" class="headerlink" title="inputClamp"></a>inputClamp</h3><ul><li>类型：<code>vec4</code> 四维向量</li><li>含义：用于将纹理坐标钳制 (clamp) 在 framebuffer 的有效范围内</li><li>坐标系：Normalized Input Coordinate</li><li>取值范围：0.0 ~ 1.0</li></ul><p>有效范围指的是临时 framebuffer 中实际包含纹理图像的部分，其余部分可能是透明的（具体原因可阅读文章下方的注意事项）。使用示例：</p><pre class="glsl"><code>vec4 color = texture2D(uSampler, clamp(modifiedTextureCoord, inputClamp.xy, inputClamp.zw));</code></pre><p>其中，<code>inputClamp.xy</code> 表示有效范围的左上角，<code>inputClamp.zw</code> 表示有效范围的右下角。</p><h3 id="resolution"><a href="#resolution" class="headerlink" title="resolution"></a>resolution</h3><ul><li>类型：<code>float</code></li><li>含义：分辨率，即 CSS 像素与物理像素的比率，类似 <code>devicePixelRatio</code></li></ul><h3 id="filterarea-legacy"><a href="#filterarea-legacy" class="headerlink" title="filterArea (legacy)"></a>filterArea (legacy)</h3><ul><li>类型：<code>vec4</code> 四维向量</li><li>含义：Filter 所覆盖的区域在屏幕坐标中的位置与大小</li></ul><p>注意，filterArea 已经被标记为 <strong>legacy</strong>，你应该考虑使用其他参数替代。</p><pre class="glsl"><code>// 以下语句等价于直接使用 filterArea uniformvec4 filterArea = vec4(inputSize.xy, outputFrame.xy)</code></pre><h3 id="filterclamp-legacy"><a href="#filterclamp-legacy" class="headerlink" title="filterClamp (legacy)"></a>filterClamp (legacy)</h3><ul><li>类型：<code>vec4</code> 四维向量</li><li>含义：兼容旧版本的 <strong>legacy</strong> uniform，与 inputClamp 等价</li></ul><h2 id="坐标系之间的转换"><a href="#坐标系之间的转换" class="headerlink" title="坐标系之间的转换"></a>坐标系之间的转换</h2><p>Filter 中的各种坐标系直接可以通过公式转换。</p><p>参考：<a href="https://github.com/pixijs/pixijs/wiki/v5-Creating-filters">v5 Creating filters · pixijs/pixijs Wiki</a>。</p><pre class="js"><code>// Input Coord// 单位：标准化坐标vTextureCoord// Input Coord -&gt; Filter Coord// 单位：标准化坐标 -&gt; CSS 像素vTextureCoord * inputSize.xy// Filter Coord -&gt; Screen Coord// 单位：CSS 像素vTextureCoord * inputSize.xy + outputFrame.xy// Filter Coord -&gt; Normalized Filter Coord// 单位：CSS 像素 -&gt; 标准化坐标vTextureCoord * inputSize.xy / outputFrame.zw// Input Coord -&gt; Physical Filter Coord// 单位：标准化坐标 -&gt; 物理像素vTextureCoord * inputPixel.xy// Filter Coord -&gt; Physical Filter Coord// 单位：CSS 像素 -&gt; 物理像素vTextureCoord * inputSize.xy * resolution // 与上一条语句等价</code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>需要注意的是，在应用 Filter 之前，PixiJS 的 <a href="https://pixijs.download/dev/docs/PIXI.FilterSystem.html">FilterSystem</a> 会先把目标的 DisplayObject 渲染到一个临时的 <a href="https://pixijs.download/dev/docs/PIXI.Framebuffer.html">Framebuffer</a> 中。</p><p>这个 framebuffer 的大小不一定等于 DisplayObject 的大小，它是一个二次幂纹理 (Power-of-two Texture)。假如你有一个 300x300 的图片要应用滤镜，那么 PixiJS 会将其渲染到一个 512x512 尺寸的 framebuffer 上，然后将这个 framebuffer 作为输入传递给着色器代码。</p><p>根据这个 DisplayObject 上的 <code>filters</code> 属性定义，PixiJS 会依次执行数组中的 filter，前一个的输出作为后一个的输入，最后一个输出的将渲染到最终的 render target 中。</p><p>不过这个创建临时 framebuffer 的行为可能会在自定义着色器代码中导致一些问题，比如纹理坐标的偏移，有时间后续我会另外发文章讨论。</p><p><img src="/pixijs-filter-coordinate-systems/spector-js.jpg" alt="spector-js"></p><p><em>▲ 通过 <a href="https://spector.babylonjs.com/">Spector.js</a> 抓取到的 PixiJS 渲染过程</em></p><h2 id="回顾默认着色器代码"><a href="#回顾默认着色器代码" class="headerlink" title="回顾默认着色器代码"></a>回顾默认着色器代码</h2><p>好了，梳理完各种坐标系和参数后，我们再来回头看看上面的默认着色器代码：</p><pre class="glsl"><code>// 标准化的「滤镜坐标」，范围是 filter 所覆盖的矩形区域attribute vec2 aVertexPosition;// 投影矩阵uniform mat3 projectionMatrix;// 纹理坐标varying vec2 vTextureCoord;// 输入 filter 的临时 framebuffer 大小uniform vec4 inputSize;// filter 所覆盖的区域在屏幕坐标中的位置与大小uniform vec4 outputFrame;vec4 filterVertexPosition(void){    // position 算出来的是 filter 所覆盖的区域的屏幕坐标    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;    // 通过投影矩阵，将屏幕坐标转换为裁剪空间 NDC 坐标    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);}vec2 filterTextureCoord(void){    // 等价于 aVertexPosition * (outputFrame.zw / inputSize.xy)    // 也就是将「滤镜坐标」从 outputFrame 的范围缩放到 inputSize 的范围    // 计算出来的就是 inputSize 范围内的「纹理坐标」    return aVertexPosition * (outputFrame.zw * inputSize.zw);}void main(void){    // 裁剪空间 NDC 坐标传递给 WebGL    gl_Position = filterVertexPosition();    // 纹理坐标传递给片元着色器    vTextureCoord = filterTextureCoord();}</code></pre><pre class="glsl"><code>// 纹理坐标varying vec2 vTextureCoord;// 输入 filter 的临时 framebuffer 纹理uniform sampler2D uSampler;void main(void){    // 使用纹理坐标在传入的纹理上采样得到颜色值，传递给 WebGL    gl_FragColor = texture2D(uSampler, vTextureCoord);}</code></pre><p>怎么样，是不是感觉清晰了很多呢？</p><h2 id="bonus-投影矩阵"><a href="#bonus-投影矩阵" class="headerlink" title="Bonus: 投影矩阵"></a>Bonus: 投影矩阵</h2><p>如果你很好奇上面的投影矩阵是怎么做到乘一下就能把屏幕坐标转换为裁剪空间坐标的，那么这一小节就可以解答你的疑惑。</p><blockquote><p>🤫 偷偷告诉你，CSS 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix"><code>transform: matrix()</code></a> 也是用了同样的矩阵变换原理。</p></blockquote><p>投影矩阵的默认计算方式如下，代码来自 <a href="https://github.com/pixijs/pixijs/blob/v7.3.2/packages/core/src/projection/ProjectionSystem.ts#L145">ProjectionSystem#calculateProjection</a>：</p><pre class="js"><code>// 矩阵表示：// | a | c | tx|// | b | d | ty|// | 0 | 0 | 1 |// 数组表示：// [a, b, 0, c, d, 0, tx, ty, 1]//// 主要参数：// sourceFrame - Filter 所覆盖的区域的世界坐标，长、宽、X、Y，像素单位// root - 控制 Y 轴反转，当渲染到 framebuffer 时投影为 y-flippedcalculateProjection(){    const pm = this.projectionMatrix;    const sign = !root ? 1 : -1;    pm.identity();    pm.a = (1 / sourceFrame.width * 2);    pm.d = sign * (1 / sourceFrame.height * 2);    pm.tx = -1 - (sourceFrame.x * pm.a);    pm.ty = -sign - (sourceFrame.y * pm.d);}</code></pre><p>这个投影矩阵主要做了两件事：</p><ol type="1"><li>缩放变换，从像素坐标转换到 0.x ~ 2.x 范围</li><li>平移变换，将坐标转换为 -1.0 ~ 1.0 范围内的标准坐标</li></ol><p>对于一个长宽为 300x300，原点左上角位于 (100, 30) 世界坐标处的矩形，可得：</p><ul><li>sourceFrame.width = 300</li><li>sourceFrame.height = 300</li><li>sourceFrame.x = 100</li><li>sourceFrame.y = 30</li><li>sign = 1 (此处假设为渲染至 framebuffer)</li></ul><p>计算出投影矩阵为：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.733ex;" xmlns="http://www.w3.org/2000/svg" width="28.158ex" height="8.597ex" role="img" focusable="false" viewBox="0 -2150 12446 3800"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1278,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1778,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(2278,0)"></path></g></g><g data-mml-node="mtd" transform="translate(4917,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(7556,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(778,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1278,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1778,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(2278,0)"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(1139,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3778,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1278,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1778,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(2278,0)"></path></g></g><g data-mml-node="mtd" transform="translate(7556,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1278,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2278,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(1139,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4917,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(9084,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(11779,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g></g></svg></mjx-container></span></p><!-- ```| 0.0067 | 0      | -1.6667 || 0      | 0.0067 | -1.2000 || 0      | 0      | 1       |``` --><p>使用矩阵乘法对世界坐标进行变换：</p><!-- NOTE: For display math, use $$ delimiters. (In this case, the delimiters may be separated from the formula by whitespace. However, there can be no blank lines between the opening and closing $$ delimiters.) --><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -11.484ex;" xmlns="http://www.w3.org/2000/svg" width="34.862ex" height="24.099ex" role="img" focusable="false" viewBox="0 -5576 15408.9 10652"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,3200.5)"><g data-mml-node="mtd"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1221.5)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1231.5)"></path><svg width="667" height="853" y="-176.5" x="0" viewBox="0 213.2 667 853"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,2.125)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1510.6)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(573.6,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><rect width="1260.7" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(3001,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(5001.3,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-114.9)"><g data-mml-node="mtd" transform="translate(500.3,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2500.7,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(573.6,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><rect width="1260.7" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(5001.3,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-1625.5)"><g data-mml-node="mtd" transform="translate(500.3,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3001,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(5537.1,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7239.9,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1221.5)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1231.5)"></path><svg width="667" height="853" y="-176.5" x="0" viewBox="0 213.2 667 853"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,2.125)"></path></svg></g></g><g data-mml-node="mo" transform="translate(8129.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mrow" transform="translate(8629.3,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(250,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2167,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g><g data-mml-node="mtd" transform="translate(11463.3,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(1333.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(389,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1945,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-275)"><g data-mml-node="mtd" transform="translate(11185.3,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-3200.5)"><g data-mml-node="mtd"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1221.5)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1231.5)"></path><svg width="667" height="853" y="-176.5" x="0" viewBox="0 213.2 667 853"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,2.125)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1510.6)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(573.6,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><rect width="1260.7" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(3001,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(5001.3,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-114.9)"><g data-mml-node="mtd" transform="translate(500.3,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2500.7,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(573.6,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><rect width="1260.7" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(5001.3,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-1625.5)"><g data-mml-node="mtd" transform="translate(500.3,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3001,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(5537.1,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7239.9,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1221.5)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1231.5)"></path><svg width="667" height="853" y="-176.5" x="0" viewBox="0 213.2 667 853"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,2.125)"></path></svg></g></g><g data-mml-node="mo" transform="translate(8129.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mrow" transform="translate(8629.3,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2167,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g><g data-mml-node="mtd" transform="translate(11463.3,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(1333.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1167,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g></g></g></g></g></svg></mjx-container></span></p><p>得到如下坐标：</p><ul><li>局部坐标：(0, 0) ~ (300, 300)</li><li>世界坐标：(100, 30) ~ (400, 330)</li><li>缩放变换：(0.67, 0.20) ~ (2.68, 2.21)</li><li>平移变换：(-1.0, -1.0) ~ (1.0, 1.0)</li></ul><p>即可将世界坐标转换为裁剪空间的标准化设备坐标。数学，很神奇吧！👊</p><p>更多关于矩阵变换的资料可参考：</p><ul><li><a href="https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-2d-matrices.html">WebGL 二维矩阵 - WebGL Fundamentals</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Matrix_math_for_the_web">Matrix math for the web - MDN</a></li><li><a href="https://www.shuxuele.com/algebra/matrix-multiplying.html">矩阵乘法 - 数学乐</a></li></ul><hr><blockquote><p>顺便测试一下我的新插件 <a href="https://github.com/prinsss/hexo-filter-tikzjax">hexo-filter-tikzjax</a>，别在意～</p></blockquote><!-- tikzjax-placeholder-80a118cab7dbcd44ba70a915fb1a3a2f -->]]></content>
    
    
    <summary type="html">&lt;p&gt;除草啦除草啦，再不更新博客就要变成热带雨林啦！🌿&lt;/p&gt;
&lt;p&gt;最近在给一个 PixiJS 程序编写 WebGL Shader，被各种参数和坐标系搞得晕头转向。痛定思痛，整理了一下 PixiJS Filter 系统中的各种概念，以供后续参阅。&lt;/p&gt;
&lt;p&gt;在 WebGL 中，我们可以通过编写顶点着色器 (Vertex Shader) 和片元着色器 (Fragment Shader) 来实现各种各样的渲染效果。而在 &lt;a href=&quot;https://pixijs.com/&quot;&gt;PixiJS&lt;/a&gt; 中，渲染引擎为我们屏蔽了绝大多数的底层实现，通常情况下用户是不需要自己调用 WebGL API 的。如果有编写自定义着色器代码的需求，一般是使用 &lt;a href=&quot;https://pixijs.download/dev/docs/PIXI.Filter.html&quot;&gt;Filter&lt;/a&gt; 来实现。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="前端" scheme="https://prinsss.github.io/tag/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="WebGL" scheme="https://prinsss.github.io/tag/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>逆向拼多多上的「关灯神器」，实现蓝牙遥控开关灯</title>
    <link href="https://prinsss.github.io/hacking-pdd-ble-switch/"/>
    <id>https://prinsss.github.io/hacking-pdd-ble-switch/</id>
    <published>2022-04-30T21:01:00.000Z</published>
    <updated>2022-04-30T21:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>依稀记得以前在某个友链博主那边看到过一篇文章，讲的是因为他们寝室所有人都懒得下床关灯，所以就用树莓派和舵机做了个远程遥控关灯的小玩意儿，当时我就感叹，果然懒才是第一生产力。</p><p>自从今年初开始出来租房住，突然就感觉睡前关灯变得好麻烦好麻烦。我的房间里是有好几盏灯的，床头的开关只能控制其中的两盏，剩下的开关在另一个地方，另外还有一个总开关位于进门的门厅处。于是我就陷入了两难之境：</p><ul><li>不用总开关：每天睡前把灯一一关掉，第二天回家又得一一开回来；</li><li>直接用总开关：开关离床太远，关完灯要摸黑上床，早上起来又得先过去开灯。</li></ul><p>不爽，太不爽了！现在都讲究智能家居，我这他喵的是智障家居啊……</p><span id="more"></span><p>作为租房一族，咱们也没法对灯啊开关啥的做电气改造（不然直接换个智能开关就完事儿了），只能使用一些「非侵入式」的方案。首先想到的就是上面提到的开发板 + 舵机，搜了一下似乎已经烂大街了，有不少成熟的方案（ESP8266 居多）。</p><p>不过我还是低估了我的懒癌，连动手都不想动了，于是直接去万能的某宝搜索「关灯神器」：</p><p><img src="/hacking-pdd-ble-switch/light-switch-products.jpg" alt="light-switch-products" /></p><p>（为什么不是某宝？别问，问就是消费降级）</p><p>哎呀，没想到还真有现成的，竟然还能红外 + 手机遥控，不错哦！</p><h2 id="入手关灯神器"><a href="#入手关灯神器" class="headerlink" title="入手「关灯神器」"></a>入手「关灯神器」</h2><p>所谓关灯神器，其实也是一个能接收红外和蓝牙信号的主板，加上一个舵机来控制开关。</p><p><img src="/hacking-pdd-ble-switch/product-unboxing.jpg" alt="product-unboxing" /></p><p>我买的这款是 🐻 卡通款，还带了个小夜灯功能，聊胜于无吧。内置锂电池供电，可以通过 micro USB 接口充电。开模挺精准，普通 86 型墙壁开关完美适配，通过无痕胶和滑槽安装，可以卸下来充电，总体还是挺满意的。</p><p>然而，这玩意最操蛋的其实是软件部分……除了附带的红外遥控器，如果想要用手机遥控它开关灯，竟然只能用微信小程序！</p><p>微信小程序……小程序……程序……序……</p><p>讲道理，我第一次知道微信小程序是还有提供<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/device/bluetooth.html">蓝牙能力</a>的，而且还真有人用，我和小伙伴们表示都孤陋寡闻，惊了个呆。</p><p>但是这我 TMD 就很不爽了，关个灯我还要打开微信，还得用你的小程序？</p><p><img src="/hacking-pdd-ble-switch/rnm.gif" alt="rnm" /></p><p>作为一个合格的折腾星人，自然不能如此任人宰割。不就是一个蓝牙设备嘛，小程序能遥控，我难道就不能遥控了？</p><h2 id="逆向关灯神器小程序"><a href="#逆向关灯神器小程序" class="headerlink" title="逆向「关灯神器」小程序"></a>逆向「关灯神器」小程序</h2><p>这里主要用到的是 <a href="https://github.com/xuedingmiaojun/wxappUnpacker">wxappUnpacker</a> 这个工具对小程序解包、反混淆。以 Android 手机为例，小程序的包文件位于：</p><pre class="text"><code>/data/data/com.tencent.mm/MicroMsg/&#123;hash&#125;/appbrand/pkg/xxxxx.wxapkg</code></pre><p>这个目录一般需要 root 权限才能访问，但不巧的是哥已经不折腾 Magisk/Xposed 好多年，手上已经没有 root 过的机器了……不过天无绝人之路，我想起来 MIUI 有自带一个应用数据备份功能，可以备份 App 的 <code>/data</code> 目录。</p><p>这玩意儿备份出来的东西其实就是标准的 Android 备份格式 (.ab) 前面加了个自己的文件头，<del>去掉头就可以吃了（划掉）</del>，用 Hex Editor 删掉文件头部 <code>414E44</code> 以前的部分，就可以直接当做 <code>.ab</code> 文件处理了。</p><p><img src="/hacking-pdd-ble-switch/miui-backup-hex-editor.jpg" alt="miui-backup-hex-editor" /></p><p>（谢谢你，雷军！金凡！）</p><p>我这里用的是 <a href="https://github.com/nelenkov/android-backup-extractor">android-backup-extractor</a>，完整流程如下：</p><pre class="bash"><code># MIUI 的备份目录adb pull /sdcard/MIUI/backup/AllBackup/20220501_010000/ ./# 去掉 .bak 文件的头部后另存为 .ab 文件java -jar ./abe.jar unpack &#39;微信(com.tencent.mm).ab&#39; mm.tar# 小程序位于 apps/com.tencent.mm/r/MicroMsg/&#123;hash&#125;/appbrand/pkg/*.wxapkgtar xvf mm.tar</code></pre><p>目录下可能会有很多小程序的 <code>.wxapkg</code> 包，这里就只能按照时间一个一个试过去了……拿到正确的小程序包以后，使用 <code>wxappUnpacker</code> 解包：</p><pre class="bash"><code>./bingo.sh xxx.wxapkg</code></pre><p>解包出来呢，大概就是这样的：</p><p><img src="/hacking-pdd-ble-switch/wxapkg-extracted.jpg" alt="wxapkg-extracted" /></p><p>接下来就是在源码里找控制逻辑和通信值了，看看有没有加密什么的。不得不说，小程序这种前端技术做的东西，确实和裸奔没什么区别，真的能叫做逆向吗……标题党实锤了<del>（作为一个前端仔，看到这些东西就像回家了一样）</del></p><p>随便看了一圈，发现这家制造商的业务线是真的广，光看里面内置的设备类型就有：风扇、茶吧机、干衣机、夜灯、颈椎按摩仪、腰部按摩器、足部按摩器、足浴器、水暖毯、灭蚊器、加湿器、电暖器、按摩椅，感觉像是专门给人生产贴牌智能硬件的，然后遥控模块和小程序用的都是同一套，十分强大。</p><p>下面贴几块处理过的关键代码：</p><pre class="jsx"><code>// 遥控按钮的入口&lt;i-btn  hover  bindtap=&quot;remoteIR&quot;  icon=&quot;icon-power&quot;  id=&quot;0&quot;  label=&quot;大灯&quot;  type=&quot;round-big&quot;&gt;&lt;/i-btn&gt;// 按钮事件处理function remoteIR(e) &#123;  var id = e.currentTarget.id;  // cmd = &quot;01&quot; + &quot;807F&quot; + &quot;12&quot;  // 每种产品都有不同配置，前两个都是固定的，最后的 &quot;12&quot; 代表开关大灯，&quot;08&quot; 为氛围灯  // 还有 &quot;01&quot; 定时十分钟，&quot;03&quot; 定时三十分钟，以及氛围灯亮度等等  var cmd = config.irType + config.irAddr + config.irCMD[id].value;  this.sendCMD(&quot;3201&quot;, cmd);  this.vibrateLong();&#125;function sendCMD(e, B) &#123;  // format2Byte 函数的作用其实就是补零到 4 位，比如 6 -&gt; 0006  // s = &quot;fe010006320101807F12&quot;;  var s = &quot;fe01&quot; + format2Byte(((e.length + B.length) / 2).toString(16)) + e + B;  sendData(s);&#125;</code></pre><p>下面的 <code>sendData</code> 也就是实际调用微信小程序 SDK 蓝牙能力的地方：</p><pre class="js"><code>function sendData(n) &#123;  // ArrayBuffer(10) = FE 01 00 06   32 01 01 80   7F 12  var t = new Uint8Array(    n.match(/[\da-f]&#123;2&#125;/gi).map(function (n) &#123;      return parseInt(n, 16);    &#125;)  ).buffer;  wx.writeBLECharacteristicValue(&#123;    // 蓝牙设备 ID    deviceId: this.globalData.deviceInfo.deviceId,    // 对应的服务 UUID    serviceId: this.globalData.deviceInfo.serviceId,    // 可写入的特征值 UUID    characteristicId: this.globalData.deviceInfo.writeCharacteristicsId,    // 写入值    value: t,    success: function (n) &#123;&#125;,    fail: function (n) &#123;&#125;,  &#125;);&#125;</code></pre><p>简单来说，就是通过 BLE (Bluetooth Low Energy, 蓝牙低功耗) 协议连接开关设备，通过读写对应 Characteristic 的值与其通信，实现设备的控制（如开关灯）。</p><h2 id="手动连接设备发送开关灯指令"><a href="#手动连接设备发送开关灯指令" class="headerlink" title="手动连接设备发送开关灯指令"></a>手动连接设备发送开关灯指令</h2><p>好了，所有需要的数值现在都已经到手了，下面就尝试跳过微信小程序，手动连接设备发送指令，看看能不能正常操作吧。</p><p>这里我用到的是 <a href="https://www.coolapk.com/apk/com.example.admin.mybledemo">BLE-调试工具</a> 这个 Android 应用，打开后扫描蓝牙设备，找到并连接「关灯神器」。如果不知道具体是哪个设备，就选看起来比较可疑的。</p><p>然后在设备的 Service 中，找到带有 <code>WRITE</code> 属性的特征值 (Characteristic)，就是我们用来通信的特征值了。点旁边的写入按钮，把上面逆向出的值填进去……</p><p><img src="/hacking-pdd-ble-switch/android-ble-test.jpg" alt="android-ble-test" /></p><p>见证奇迹的时刻，灯关上了！再次写入同样的值，灯又打开了！</p><p>欧耶✌️</p><p>还有其他的指令值也可以试一试，比如最后两位改成 <code>08</code> 就是开关氛围灯，等等。</p><h2 id="写一个-android-app"><a href="#写一个-android-app" class="headerlink" title="写一个 Android App"></a>写一个 Android App</h2><p>想要让这个开关更“智能”，单靠手动操作手机遥控肯定是不够看的。因为手头没有开发板（听说现在树莓派都被炒上天了，不懂），所以还是让闲置的手机发挥余热吧。</p><p>好在之前学的那点 Android 开发还没有全忘光，基于 <a href="https://github.com/aicareles/Android-BLE">Android-BLE</a> 这个库（其实上面我们用来测试的 App 就是这个库的 demo）和小程序里扒出来的控制逻辑糊了一个遥控 App 出来（代码放在 <a href="https://github.com/prinsss/ble-light-switch">GitHub</a>）：</p><p><img src="/hacking-pdd-ble-switch/ble-light-switch.jpg" alt="ble-light-switch" /></p><p>可以看到界面非常简约<del>陋</del>，不过比什么微信小程序可好用多了。幸福感 UP！</p><p>等以后有时间的话，再捣鼓捣鼓接入一下 Home Assistant，加几个自动化，不用动手直接喊 Siri 关灯，岂不美哉？（dreaming）</p><p><img src="/hacking-pdd-ble-switch/demo.gif" alt="demo" /></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/device/ble.html">蓝牙低功耗 (Bluetooth Low Energy, BLE) | 微信开放文档</a></li><li><a href="https://developer.android.com/guide/topics/connectivity/bluetooth-le?hl=zh-cn">蓝牙低功耗概览 | Android Developers</a></li><li><a href="https://github.com/aicareles/Android-BLE">aicareles/Android-BLE: Android-BLE蓝牙框架</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;依稀记得以前在某个友链博主那边看到过一篇文章，讲的是因为他们寝室所有人都懒得下床关灯，所以就用树莓派和舵机做了个远程遥控关灯的小玩意儿，当时我就感叹，果然懒才是第一生产力。&lt;/p&gt;
&lt;p&gt;自从今年初开始出来租房住，突然就感觉睡前关灯变得好麻烦好麻烦。我的房间里是有好几盏灯的，床头的开关只能控制其中的两盏，剩下的开关在另一个地方，另外还有一个总开关位于进门的门厅处。于是我就陷入了两难之境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不用总开关：每天睡前把灯一一关掉，第二天回家又得一一开回来；&lt;/li&gt;
&lt;li&gt;直接用总开关：开关离床太远，关完灯要摸黑上床，早上起来又得先过去开灯。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不爽，太不爽了！现在都讲究智能家居，我这他喵的是智障家居啊……&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="Android" scheme="https://prinsss.github.io/tag/Android/"/>
    
    <category term="物联网" scheme="https://prinsss.github.io/tag/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>在 M1 Mac 上运行 macOS 虚拟机</title>
    <link href="https://prinsss.github.io/macos-vm-on-m1-mac/"/>
    <id>https://prinsss.github.io/macos-vm-on-m1-mac/</id>
    <published>2021-11-26T10:30:00.000Z</published>
    <updated>2021-11-26T10:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apple M1 芯片问世一年有余，时至今日，在 M1 Mac 上运行 Windows、Linux 虚拟机的方法都已经比较成熟了。然而 macOS 本身的虚拟化却并非如此：直到 Monterey 发布，于 M1 Mac 上运行 macOS 虚拟机才成为可能。</p><p>最近有几个小实验需要在 macOS 虚拟机上跑，本来以为去 Parallels Desktop 上开一个就完事了，搜了一下才发现，其实事情没那么简单……实际配置过程中也是踩了几个坑，所以顺带记录一下。</p><span id="more"></span><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>目前想要在 M1 Mac 上运行 macOS 虚拟机，有以下要求：</p><ul><li>Host OS 和 Guest OS 都必须是 Monterey</li><li>安装镜像必须是 <a href="https://en.wikipedia.org/wiki/IPSW">IPSW 格式</a></li></ul><p>为什么 Big Sur 不行？因为在 Virtualization framework 中运行 macOS 虚拟机是 <a href="https://twitter.com/zhuowei/status/1402004538194808833">Monterey 才加入的功能</a>。</p><p>那以前怎么就能虚拟呢？因为 ARM 架构的 M1 Mac 在引导上用的其实是 iOS 那一套，不是传统的 UEFI，所以苹果官方没提供 <a href="https://developer.apple.com/documentation/virtualization/vzmacosbootloader">bootloader</a> 的话自然没戏。黑苹果也是一样的道理，只能说且用且珍惜吧。</p><p>至于 <code>.ipsw</code> 文件，这玩意其实就是 iOS 固件的格式……真就大号 iPad 呗！</p><p>IPSW 镜像文件可以在这里下载：<a href="https://mrmacintosh.com/apple-silicon-m1-full-macos-restore-ipsw-firmware-files-database/">Apple Silicon M1 Full macOS Restore IPSW Firmware Files Database – Mr. Macintosh</a></p><h2 id="veertus-anka"><a href="#veertus-anka" class="headerlink" title="Veertu's Anka"></a>Veertu's Anka</h2><p>这个是我目前最推荐的一种方法，所以放在第一个说。</p><p>Anka 是什么？根据官网的介绍，<a href="https://docs.veertu.com/anka/arm/what-is-anka/">Anka</a> 是一个专门用来管理 macOS 虚拟机的软件，可以与现有的基于容器的 DevOps 工作流集成，为 iOS 应用的构建与测试提供 CI/CD 自动化支持。再看下其开发者 <a href="https://veertu.com/">Veertu</a>，也是做 iOS CI 和 macOS 云这一块的。</p><p>并且今年十月发布的 <a href="https://veertu.com/create-macos-vms-for-ios-ci-using-apple-m1-hardware/">Anka 3.0 (beta)</a> 已经支持在 M1 Mac 上创建 macOS 虚拟机了，正是我们所需要的。</p><p>下载 <a href="https://veertu.com/downloads/anka-m1-beta">Anka M1 beta</a> 版，安装后打开，就可以直接通过图形界面创建虚拟机了：</p><p><img src="/macos-vm-on-m1-mac/anka-m1-beta.jpg" alt="anka-m1-beta" /></p><p>或者，你也可以使用命令行创建虚拟机（相关文档在<a href="https://docs.veertu.com/anka/arm/anka-virtualization/command-reference/">这里</a>）：</p><pre class="bash"><code>anka create --ram-size 4G --cpu-count 4 --disk-size 80G \  --app ~/Downloads/UniversalMac_12.0.1_21A559_Restore.ipsw &#39;macOS 12&#39;</code></pre><p>运行虚拟机：</p><pre class="bash"><code>anka start -uv</code></pre><p>Anka 默认将虚拟机存储在 <code>~/Library/Application Support/Veertu/Anka</code> 目录下，可以参考<a href="https://docs.veertu.com/anka/arm/anka-virtualization/modifying-the-global-configuration/">这里</a>修改保存位置，或者干脆做个软链接也行。虚拟机的配置文件也在同目录下的 <code>config.yaml</code> 文件中，有些图形界面不提供的配置项可以在这里修改。</p><p>也可以使用命令行修改，比如修改虚拟机的分辨率和 DPI：</p><pre class="bash"><code>anka modify &#39;macOS 12&#39; display -r 2560x1600 -d 220</code></pre><p>另外，Anka 提供的 Guest Tool 会自动打开虚拟机内 macOS 的自动登录、SSH 并且阻止系统休眠（应该都是为了自动化服务的），并且提供了剪贴板共享、<code>anka cp</code> 文件复制，以及可以直接在虚拟机内执行命令的 <code>anka run</code> 等功能。</p><p><img src="/macos-vm-on-m1-mac/anka-macos-vm.jpg" alt="anka-macos-vm" /></p><p>不过有一个需要顾虑的是 <a href="https://docs.veertu.com/anka/arm/licensing/">License</a> 的问题，在 beta 期间可以免费使用 Anka 没问题，但不知道正式版发布以后如何。不过原本 Veertu 家面向个人开发者的 <a href="https://veertu.com/anka-develop/">Anka Develop</a> 就是免费的，所以或许并不需要担心。</p><p>或者，你也可以使用本文最后提到的开源方案，体验也是不错的。</p><h2 id="parallels-desktop"><a href="#parallels-desktop" class="headerlink" title="Parallels Desktop"></a>Parallels Desktop</h2><p>毕竟是 Mac 虚拟机行业名声最响的，其实我第一个想到的也是 PD。</p><p>查了一下，macOS 作为 Guest OS 是 <a href="https://www.parallels.com/cn/blogs/parallels-desktop-17-just-released/">PD17 才支持的功能</a>（前略，天国的 PD16 用户），然后 <a href="https://www.parallels.com/cn/blogs/parallels-desktop-17-update/">17.1 更新</a>添加了 Parallels Tools 的支持，还提了一嘴「虚拟机默认磁盘大小从 32 GB 增加至 64 GB」。</p><p>我最开始还不知道这有什么好拿出来说的，后来才知道原因：你在 PD 中甚至无法调整 Mac 虚拟机的磁盘大小。不仅是磁盘，CPU 核心数、内存大小、网络连接方式都不能改，可配置项为零（至少无法在图形界面中配置），完完全全就是个半成品。</p><p>如果你确实想安装，这里是官方教程：<a href="https://kb.parallels.com/125561">Install macOS Monterey 12 virtual machine on a Mac with Apple M1 chips</a></p><p>点「新建虚拟机」以后，安装助手里就有直接下载 macOS 的选项。看起来很友好，然而……</p><p><img src="/macos-vm-on-m1-mac/pd-vm-installation-failed.jpg" alt="pd-vm-installation-failed" /></p><p>啃哧啃哧下载了半天，最后提示「安装系统时出错」，也不知道为什么。查了下官方 Knowledge Base，貌似也不是个例：<a href="https://kb.parallels.com/en/128442">Inability to create a macOS Monterey 12 VM on Mac computers with Apple M1 chips</a></p><p>后来我找到了这篇文章：<a href="http://blog.rolpdog.com/2021/08/customizing-macos-guest-vms-in.html">Customizing MacOS guest VMs in Parallels 17 on Apple Silicon</a>，按照其中的介绍，通过命令行创建虚拟机，竟然就可以运行了……</p><pre class="bash"><code>/Applications/Parallels\ Desktop.app/Contents/MacOS/prl_macvm_create \  ~/Downloads/UniversalMac_12.0.1_21A559_Restore.ipsw \  /Volumes/xxx/Parallels/macOS\ 12.macvm \  --disksize 80000000000</code></pre><blockquote><p>我之前用 17.0.1 版本的时候也尝试用 <code>prl_macvm_create</code> 创建虚拟机，但是在进度到 90% 的时候失败了，提示「内部虚拟化错误。安装失败」。升级到 17.1.0 后虽然安装助手还是「安装系统时出错」，但命令行是可以正常创建虚拟机的。</p></blockquote><p>命令行启动虚拟机：</p><pre class="bash"><code>/Applications/Parallels\ Desktop.app/Contents/MacOS/Parallels\ Mac\ VM.app/Contents/MacOS/prl_macvm_app \  --openvm /Volumes/xxx/Parallels/macOS\ 12.macvm</code></pre><p>安装完成后，在 PD 控制中心可以导入 <code>.macvm</code> 格式的虚拟机文件，导入以后就可以从图形界面启动了。</p><p><img src="/macos-vm-on-m1-mac/pd-macos-vm.jpg" alt="pd-macos-vm" /></p><p>作为一个商业虚拟机软件，且不说快照、Suspend，连最基本的 VM 管理功能都欠奉，我也是无话可说了。想知道还有哪些功能是目前还不能用的，可以查看 <a href="https://kb.parallels.com/125561">Known issues and limitations</a>。</p><h2 id="macvm"><a href="#macvm" class="headerlink" title="MacVM"></a>MacVM</h2><p><a href="https://github.com/KhaosT/MacVM">MacVM</a> 是一个开源项目，基于 Virtualization framework（当然啦，大家都是用的这个），提供了简单的图形界面用于配置虚拟机。</p><p>因为作者并没有提供编译好的程序，所以需要自己使用 Xcode 从源码编译。</p><p>下载源码，用 Xcode 打开 <code>MacVM.xcodeproj</code>，在 Signing &amp; Capabilities 中修改为自己的开发者证书：</p><p><img src="/macos-vm-on-m1-mac/macvm-xcode.jpg" alt="macvm-xcode" /></p><p>点击运行，会跳出来一个文件选择框，不用管先叉掉。</p><p>然后菜单栏 File -&gt; New，新建虚拟机。输入 CPU 核心数、内存和磁盘大小后点菜单栏 File -&gt; Save 保存，会生成一个 <code>.macosvm</code> 包。之后虚拟机的虚拟磁盘镜像也会保存在这个 bundle 中，所以要留意选择保存的位置。</p><p><img src="/macos-vm-on-m1-mac/macvm-new-vm.jpg" alt="macvm-new-vm" /></p><p>然后点 Select IPSW and Continue 按钮，选择之前下载的镜像文件，点 Install，等它安装完就好了。（最开始的版本还要自己生成磁盘镜像，然后拷贝到应用容器中，还要用 Apple Configurator 2 手动装系统，相比起来现在已经友好很多了）</p><p>安装完成后，窗口会整个儿变黑，此时就可以点右上角的启动按钮启动虚拟机了。</p><p><img src="/macos-vm-on-m1-mac/macvm-success.jpg" alt="macvm-success" /></p><p>用这种方法优点是开源，有啥不爽的都可以自己改，包括没有提供配置项的地方。缺点就是要自己编译，毕竟不是谁都装了 Xcode 的。</p><p>跑起来以后和上面两种基本没差别，因为实际的虚拟机创建、安装和运行都是 Virtualization framwork 实现的，整个项目的代码其实并不多。</p><p>GitHub 上还有一些类似的项目，这里也列出来供参考：</p><ul><li><a href="https://github.com/ming900518/macOS-Virtual-Machine">ming900518/macOS-Virtual-Machine: A ARM macOS Virtual Machine.</a></li><li><a href="https://github.com/zhuowei/VirtualizationDemo">zhuowei/VirtualizationDemo: demoing Virtualization.framework changes in macOS 12 beta</a></li><li><a href="https://github.com/jspahrsummers/Microverse">jspahrsummers/Microverse: macOS virtualization app for M1/Apple Silicon</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上三种方法，其实底层大家都是一样的，就看在此之上谁做得更完善了。综合来看，目前感觉 Anka 的使用体验是最好的。</p><p>关于 M1 Mac 运行 macOS 虚拟机的一些参考链接：</p><ul><li><a href="https://apple.stackexchange.com/questions/420494/is-there-a-way-to-run-a-macos-guest-virtual-machine-on-an-m1-apple-silicon-hos">Is there a way to run a macOS guest virtual machine on an M1 / Apple Silicon host? - Ask Different</a></li><li><a href="https://github.com/utmapp/UTM/issues/2360">macOS as guest on macOS host · Issue #2360 · utmapp/UTM</a></li><li><a href="https://discussions.apple.com/thread/252330935">Virtualization on M1: MacOS Guest - Apple Community</a></li><li><a href="https://forum.parallels.com/threads/big-sur-installation.351864/">Big Sur installation | Parallels Forums</a></li><li><a href="https://forums.macrumors.com/threads/is-it-possible-to-run-a-macos-virtual-machine-on-m1-yet.2272694/">Is it possible to run a macOS virtual machine on M1 yet?</a></li><li><a href="https://forums.macrumors.com/threads/you-can-now-virtualize-macos-monterey-on-m1-macs.2303480/">You can now virtualize macOS Monterey on M1 Macs!</a></li></ul><p>UTM 有一个 <a href="https://github.com/utmapp/UTM/tree/dev-monterey"><code>dev-monterey</code></a> 分支，我还没有尝试，不知道以后会不会推出支持 macOS Guest 的版本。</p><p>听说还有人使用 <a href="https://github.com/kholia/OSX-KVM">OSX-KVM</a> 和 <a href="https://github.com/sickcodes/Docker-OSX">Docker-OSX</a> 跨架构在 M1 上运行了 x86 的 macOS，但是性能很糟糕（simulation 嘛）。</p><p>另外，以上的这些虚拟机方案都不支持快照恢复，有点麻烦。不过好在我用来放虚拟机的移动硬盘是 APFS 格式的，支持写时复制 (Copy on write)，所以直接把镜像整个儿复制一份就好了，很快，也不会占用多余的存储空间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Apple M1 芯片问世一年有余，时至今日，在 M1 Mac 上运行 Windows、Linux 虚拟机的方法都已经比较成熟了。然而 macOS 本身的虚拟化却并非如此：直到 Monterey 发布，于 M1 Mac 上运行 macOS 虚拟机才成为可能。&lt;/p&gt;
&lt;p&gt;最近有几个小实验需要在 macOS 虚拟机上跑，本来以为去 Parallels Desktop 上开一个就完事了，搜了一下才发现，其实事情没那么简单……实际配置过程中也是踩了几个坑，所以顺带记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="Mac" scheme="https://prinsss.github.io/tag/Mac/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 全家桶：Actions 自动构建多架构 Docker 镜像并上传至 Packages (ghcr.io)</title>
    <link href="https://prinsss.github.io/ghcr-io-with-github-actions/"/>
    <id>https://prinsss.github.io/ghcr-io-with-github-actions/</id>
    <published>2021-11-24T10:30:00.000Z</published>
    <updated>2021-11-24T10:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间把 GitHub 的用户名修改成了 <a href="https://github.com/prinsss"><span class="citation" data-cites="prinsss">@prinsss</span></a>，准备把其他地方的账号也修改一下的时候，却发现 Docker Hub 的 username 不能改，只能<a href="https://hub.docker.com/support/doc/how-do-i-change-my-docker-username">砍掉重练</a>（npm 也是）。</p><p>想想反正我 Docker Hub 上也没上传什么东西，不如就用 GitHub 自家的 Container registry 来托管镜像吧！</p><p>这里有个小插曲：其实我挺早之前就想要改名了，但当时在忙秋招，考虑到改名后可能会有一些后续要处理（擦屁股），所以只是创建了一个 organization 把名字占住，等有时间了再正式改名。然而后来我把组织删了，想要修改 GitHub 账户的用户名时，却提示 <code>prinsss</code> 这个名称 unavailable（我确定它是没被占用的，因为我还能再用这个名字创建组织），不知道是不是触发了内部的什么保留机制。</p><p>最后还是发工单找客服解决了，而且等了一个多星期才回复，也是挺无语的。原来的 <code>printempw</code> 这个名字我也保留了，所以 <a href="https://printempw.github.io/">printempw.github.io</a> 这个域名还是可以访问的，目前是<a href="https://github.com/prinsss/prinsss.github.io/blob/source/_config.yml#L148">两边同步更新</a>，后续再慢慢迁移。</p><span id="more"></span><h2 id="github-packages-介绍"><a href="#github-packages-介绍" class="headerlink" title="GitHub Packages 介绍"></a>GitHub Packages 介绍</h2><p>其实最开始知道这个还是因为 Homebrew，看它每次安装软件下载 bottle 时都会从 ghcr.io 这个域名下载。好奇去查了一下，发现原来 GitHub 自己也整了一个软件包仓库，颇有一统天下的味道。</p><p><a href="https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages">GitHub Packages</a> 支持托管 Docker、npm、Maven、NuGet、RubyGems 等软件包，用起来比较像私有库。比起官方 registry 的好处就是其与 GitHub 完全集成，可以把源代码和软件包整合在一起，包括权限管理都可以用 GitHub 的那一套。</p><p>GitHub Packages 对于开源项目完全免费，私有仓库也有一定的<a href="https://github.com/features/packages#pricing">免费额度</a>。</p><h2 id="手动上传镜像"><a href="#手动上传镜像" class="headerlink" title="手动上传镜像"></a>手动上传镜像</h2><p>基础用法和 Docker Hub 是一样的，只是 namespace 变为了 ghcr.io。</p><p>首先创建一个 PAT (Personal Access Token) 用于后续认证：</p><ul><li>打开 https://github.com/settings/tokens/new?scopes=write:packages</li><li>创建一个 PAT，勾选 <code>write:packages</code> 权限</li></ul><blockquote><p><strong>注意</strong>：如果是在 GitHub Actions 中访问 GitHub Packages，则应该使用 <code>GITHUB_TOKEN</code> 而非 PAT 以提升安全性。后续章节会说明如何在 Actions 中使用 <code>GITHUB_TOKEN</code>。</p></blockquote><p>然后我们就可以用这个 Token 登录镜像仓库了：</p><pre class="bash"><code>export CR_PAT=YOUR_TOKENecho $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin</code></pre><p>尝试一下推送镜像：</p><pre class="bash"><code>docker tag hello-world:latest ghcr.io/prinsss/hello-world:latestdocker push ghcr.io/prinsss/hello-world:latest</code></pre><p>可以看到已经出现在 GitHub 上了：</p><p><img src="/ghcr-io-with-github-actions/packages-hello-world.png" alt="packages-hello-world" /></p><p>刚上传的镜像默认都是 private，可以在 Package Settings 下方的 <strong>Change package visibility</strong> 处修改为公开镜像。</p><h2 id="自动构建并上传"><a href="#自动构建并上传" class="headerlink" title="自动构建并上传"></a>自动构建并上传</h2><p>连镜像都放 GitHub 上了，那怎么好意思不用 GitHub Actions 呢！</p><p>下面就使用 Actions 实现代码更新后自动构建多架构 Docker 镜像，打 tag 并发布。</p><p>废话不多说，直接贴配置：</p><pre class="yaml"><code># yaml-language-server: $schema=https://json.schemastore.org/github-workflowname: Build Docker Image# 当 push 到 master 分支，或者创建以 v 开头的 tag 时触发，可根据需求修改on:  push:    branches:      - master    tags:      - v*env:  REGISTRY: ghcr.io  IMAGE: prinsss/ga-hit-counterjobs:  build-and-push:    runs-on: ubuntu-latest    # 这里用于定义 GITHUB_TOKEN 的权限    permissions:      packages: write      contents: read    steps:      - name: Checkout        uses: actions/checkout@v2      # 缓存 Docker 镜像以加速构建      - name: Cache Docker layers        uses: actions/cache@v2        with:          path: /tmp/.buildx-cache          key: $&#123;&#123; runner.os &#125;&#125;-buildx-$&#123;&#123; github.sha &#125;&#125;          restore-keys: |            $&#123;&#123; runner.os &#125;&#125;-buildx-      # 配置 QEMU 和 buildx 用于多架构镜像的构建      - name: Set up QEMU        uses: docker/setup-qemu-action@v1      - name: Set up Docker Buildx        id: buildx        uses: docker/setup-buildx-action@v1      - name: Inspect builder        run: |          echo &quot;Name:      $&#123;&#123; steps.buildx.outputs.name &#125;&#125;&quot;          echo &quot;Endpoint:  $&#123;&#123; steps.buildx.outputs.endpoint &#125;&#125;&quot;          echo &quot;Status:    $&#123;&#123; steps.buildx.outputs.status &#125;&#125;&quot;          echo &quot;Flags:     $&#123;&#123; steps.buildx.outputs.flags &#125;&#125;&quot;          echo &quot;Platforms: $&#123;&#123; steps.buildx.outputs.platforms &#125;&#125;&quot;      # 登录到 GitHub Packages 容器仓库      # 注意 secrets.GITHUB_TOKEN 不需要手动添加，直接就可以用      - name: Log in to the Container registry        uses: docker/login-action@v1        with:          registry: $&#123;&#123; env.REGISTRY &#125;&#125;          username: $&#123;&#123; github.actor &#125;&#125;          password: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;      # 根据输入自动生成 tag 和 label 等数据，说明见下      - name: Extract metadata for Docker        id: meta        uses: docker/metadata-action@v3        with:          images: $&#123;&#123; env.REGISTRY &#125;&#125;/$&#123;&#123; env.IMAGE &#125;&#125;      # 构建并上传      - name: Build and push        uses: docker/build-push-action@v2        with:          context: .          file: ./Dockerfile          target: production          builder: $&#123;&#123; steps.buildx.outputs.name &#125;&#125;          platforms: linux/amd64,linux/arm64          push: true          tags: $&#123;&#123; steps.meta.outputs.tags &#125;&#125;          labels: $&#123;&#123; steps.meta.outputs.labels &#125;&#125;          cache-from: type=local,src=/tmp/.buildx-cache          cache-to: type=local,dest=/tmp/.buildx-cache      - name: Inspect image        run: |          docker buildx imagetools inspect \          $&#123;&#123; env.REGISTRY &#125;&#125;/$&#123;&#123; env.IMAGE &#125;&#125;:$&#123;&#123; steps.meta.outputs.version &#125;&#125;</code></pre><p>自动构建的效果可以在我的 <a href="https://github.com/prinsss/google-analytics-hit-counter">GitHub</a> 上查看（其实就是之前写的那个 <a href="https://prinsss.github.io/google-analytics-api-page-views-counter/">使用 Google Analytics API 实现博客阅读量统计</a>）。</p><p>另外有几个需要注意的点：</p><h3 id="上传时出现-400-bad-request"><a href="#上传时出现-400-bad-request" class="headerlink" title="上传时出现 400 Bad Request"></a>上传时出现 400 Bad Request</h3><p>这个昨天搞得我真是一脸懵逼，报错是这样的：</p><pre class="text"><code>#16 exporting to image#16 pushing layers 0.5s done#16 ERROR: unexpected status: 400 Bad Request------ &gt; exporting to image:------error: failed to solve: unexpected status: 400 Bad RequestError: buildx failed with: error: failed to solve: unexpected status: 400 Bad Request</code></pre><p>排查了好久，最后发现是我打 tag 的时候忘记加上用户名了，原本是 <code>ghcr.io/prinsss/ga-hit-counter</code> 的，我给打成了 <code>ghcr.io/ga-hit-counter</code>，难怪推不上去（也要吐槽一下这个报错，就一个 400 鬼知道是什么啊）。</p><h3 id="上传时出现-403-forbidden"><a href="#上传时出现-403-forbidden" class="headerlink" title="上传时出现 403 Forbidden"></a>上传时出现 403 Forbidden</h3><p>把上面那个解决了以后，心想这次总该成了吧，结果又来了个 403，我又一脸懵逼：</p><pre class="text"><code>#16 exporting to image#16 pushing layers 0.7s done#16 ERROR: unexpected status: 403 Forbidden------ &gt; exporting to image:------error: failed to solve: unexpected status: 403 ForbiddenError: buildx failed with: error: failed to solve: unexpected status: 403 Forbidden</code></pre><p>再一番排查，发现是需要在 Package Settings 中的 <strong>Manage Actions access</strong> 处指定可以访问该软件包的源码仓库（也就是 Actions 所在的仓库）。好吧……</p><p><img src="/ghcr-io-with-github-actions/manage-actions-access.png" alt="manage-actions-access" /></p><p>添加了仓库，这下确实可以了。</p><h3 id="元数据自动生成"><a href="#元数据自动生成" class="headerlink" title="元数据自动生成"></a>元数据自动生成</h3><p><a href="https://github.com/docker/metadata-action"><code>docker/metadata-action</code></a> 这是一个比较有意思的 action，它可以从源码以及触发构建的 event 中获取数据，自动生成相应的 Docker 镜像 tag 以及 label。（在 GitHub 文档官方的示例中，这是由<a href="https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio">一段脚本</a>完成的）</p><p>比如默认的效果就是：</p><table><colgroup><col style="width: 21%" /><col style="width: 39%" /><col style="width: 39%" /></colgroup><thead><tr class="header"><th>Event</th><th>Ref</th><th>Docker Tags</th></tr></thead><tbody><tr class="odd"><td><code>pull_request</code></td><td><code>refs/pull/2/merge</code></td><td><code>pr-2</code></td></tr><tr class="even"><td><code>push</code></td><td><code>refs/heads/master</code></td><td><code>master</code></td></tr><tr class="odd"><td><code>push</code></td><td><code>refs/heads/releases/v1</code></td><td><code>releases-v1</code></td></tr><tr class="even"><td><code>push tag</code></td><td><code>refs/tags/v1.2.3</code></td><td><code>v1.2.3</code>, <code>latest</code></td></tr><tr class="odd"><td><code>push tag</code></td><td><code>refs/tags/v2.0.8-beta.67</code></td><td><code>v2.0.8-beta.67</code>, <code>latest</code></td></tr></tbody></table><p>也就是我现在使用的：源码推送到 <code>master</code> 分支则自动构建并更新 <code>master</code> tag 的镜像；在 git 上创建以 <code>v</code> 开头的 tag，Docker 那边也会自动创建相应的 tag 并且更新 <code>latest</code>，不错不错。（不过想想我可能保留一个 tag 触发就够了）</p><p>比如我 push 了一个 <code>v0.2.0</code> 的 tag 上去，自动生成的元数据就是这样的：</p><pre class="text"><code>Run docker/metadata-action@v3Context info  eventName: push  sha: 6071f564087d49be48dc318b89fc22ff96cf6a17  ref: refs/tags/v0.2.0  workflow: Build Docker Image  action: meta  actor: prinsss  runNumber: 11  runId: 1495122573Docker tags  ghcr.io/prinsss/ga-hit-counter:v0.2.0  ghcr.io/prinsss/ga-hit-counter:latestDocker labels  org.opencontainers.image.title=google-analytics-hit-counter  org.opencontainers.image.description=Page views counter that pulls data from Google Analytics API.  org.opencontainers.image.url=prinsss/google-analytics-hit-counter  org.opencontainers.image.source=prinsss/google-analytics-hit-counter  org.opencontainers.image.version=v0.2.0  org.opencontainers.image.created=2021-11-23T14:10:35.953Z  org.opencontainers.image.revision=6071f564087d49be48dc318b89fc22ff96cf6a17  org.opencontainers.image.licenses=MIT</code></pre><p>如果想要修改为其他方案，action 也提供了丰富的配置项，可以自行修改。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>用 GitHub Packages 托管 Docker 镜像，体验还是挺不错的。硬要说有什么缺点的话就是不好配置国内镜像吧，毕竟大部分国内镜像都是对应 Docker Hub 的。</p><p>另外多架构镜像的这个构建时间也是挺感人，模拟 arm64 一次要六七分钟，哈人。（所以写 Dockerfile 还是挺讲究的，怎么让缓存效率最大化，这方面还得再学习）</p><p>参考链接：</p><ul><li><a href="https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages">Introduction to GitHub Packages - GitHub Docs</a></li><li><a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">Working with the Container registry - GitHub Docs</a></li><li><a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication">Automatic token authentication - GitHub Docs</a></li><li><a href="https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio">Publishing and installing a package with GitHub Actions - GitHub Docs</a></li><li><a href="https://github.community/t/inactive-username-cant-be-claimed/189177">Inactive username can’t be claimed? - GitHub Support Community</a></li></ul><p>题外话，秋招后这段时间我也折腾了一些东西，有空慢慢发出来吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前段时间把 GitHub 的用户名修改成了 &lt;a href=&quot;https://github.com/prinsss&quot;&gt;&lt;span class=&quot;citation&quot; data-cites=&quot;prinsss&quot;&gt;@prinsss&lt;/span&gt;&lt;/a&gt;，准备把其他地方的账号也修改一下的时候，却发现 Docker Hub 的 username 不能改，只能&lt;a href=&quot;https://hub.docker.com/support/doc/how-do-i-change-my-docker-username&quot;&gt;砍掉重练&lt;/a&gt;（npm 也是）。&lt;/p&gt;
&lt;p&gt;想想反正我 Docker Hub 上也没上传什么东西，不如就用 GitHub 自家的 Container registry 来托管镜像吧！&lt;/p&gt;
&lt;p&gt;这里有个小插曲：其实我挺早之前就想要改名了，但当时在忙秋招，考虑到改名后可能会有一些后续要处理（擦屁股），所以只是创建了一个 organization 把名字占住，等有时间了再正式改名。然而后来我把组织删了，想要修改 GitHub 账户的用户名时，却提示 &lt;code&gt;prinsss&lt;/code&gt; 这个名称 unavailable（我确定它是没被占用的，因为我还能再用这个名字创建组织），不知道是不是触发了内部的什么保留机制。&lt;/p&gt;
&lt;p&gt;最后还是发工单找客服解决了，而且等了一个多星期才回复，也是挺无语的。原来的 &lt;code&gt;printempw&lt;/code&gt; 这个名字我也保留了，所以 &lt;a href=&quot;https://printempw.github.io/&quot;&gt;printempw.github.io&lt;/a&gt; 这个域名还是可以访问的，目前是&lt;a href=&quot;https://github.com/prinsss/prinsss.github.io/blob/source/_config.yml#L148&quot;&gt;两边同步更新&lt;/a&gt;，后续再慢慢迁移。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="Docker" scheme="https://prinsss.github.io/tag/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 ESLint + Prettier + Commitlint 规范代码风格与提交流程</title>
    <link href="https://prinsss.github.io/eslint-prettier-commitlint/"/>
    <id>https://prinsss.github.io/eslint-prettier-commitlint/</id>
    <published>2021-10-13T21:37:49.000Z</published>
    <updated>2021-10-13T21:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为课程需要开了几个多人协作的新项目，感觉有必要在团队中强制一下代码规范，免得提交上来的东西对 leader 血压不好。前后端都是 TypeScript 的，所以就用流行的 ESLint + Prettier 组合拳（配合 <a href="https://standardjs.com/">Standard</a> 规范），EditorConfig 同步编辑器配置，再加上 commitlint 规范提交信息，最后用 Git Hooks 实现自动化检查。</p><p>配置虽然不难，但还是有点繁琐的，所以记录一下，如果忘了下次可以翻回来看。</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先来介绍一下这些工具都是啥吧。</p><ul><li><a href="https://eslint.org/">ESLint</a></li></ul><p>ESLint 是一个插件化并且可配置的 JavaScript 语法规则和代码风格的检查工具，能够帮你轻松写出高质量的 JavaScript 代码。</p><p>简单来说就是可以静态分析代码中的问题（包括语法问题和代码风格问题，比如未使用的变量，<code>if</code> 和括号之间没有空格），给出提示，并且能够自动修复。</p><ul><li><a href="https://prettier.io/">Prettier</a></li></ul><p>Prettier 是一个“有态度” (opinionated) 的代码格式化工具。它支持大量编程语言，已集成到大多数编辑器中，且几乎不需要设置参数。</p><p>什么叫 opinionated？不同于 ESLint 什么都让你配置，Prettier 是一种严格规范的代码风格工具，主张尽量降低可配置性，严格规定组织代码的方式。</p><p>Prettier 只提供少量配置项，这么做的原因很简单：既然为停止争论而生，那么为何还需要设置更多选项让人们继续纠结于如何配置呢？</p><p>规矩就是这样，不服憋着。</p><ul><li><a href="https://commitlint.js.org/">commitlint</a></li></ul><p>检查你的 Git 提交信息是否符合配置的格式要求。</p><p>相信大家或多或少都见过某些人奔放不羁的 commit message，不仅给项目管理带来困难，看着也挺难受的。使用 commitlint 可以实现在提交前检查提交信息是否符合规范，配合 commitzen 食用更佳。</p><hr /><p>看到这里你可能有些疑问，ESLint 可以自动修复代码风格问题，Prettier 也可以格式化代码，那它们两个不会打架吗？没错，确实会有冲突的情况，而这也是我们后面要解决的。</p><p>既然会冲突，那为什么要同时使用它们呢？主要有这几个原因：</p><ul><li>Prettier 的代码格式化能力更强。它的工作原理是把代码解析成 AST，然后根据规则重新输出，等于帮你整个儿<strong>重写</strong>了一遍代码。ESLint 的 <code>--fix</code> 自动修复虽然也可以实现一定程度的代码格式化，但没有 Prettier 效果好。</li><li>Prettier 支持的文件格式更多，比如 HTML、CSS、JSON、Markdown 等等。</li></ul><p>当然，如果 ESLint 对你来说已经够用，那么不加入 Prettier 其实也是完全没问题的。</p><h2 id="eslint"><a href="#eslint" class="headerlink" title="ESLint"></a>ESLint</h2><p>这里我们采用 Standard 规范。</p><p>以 Vite 新建的 Vue 3 + TS 白板项目为例：</p><pre class="bash"><code>pnpm add -D \    @typescript-eslint/eslint-plugin \    @typescript-eslint/parser \    eslint \    eslint-config-standard-with-typescript \    eslint-plugin-import \    eslint-plugin-node \    eslint-plugin-promise \    eslint-plugin-vue</code></pre><p>如果你的项目不使用 TypeScript，可以把 <code>eslint-config-standard-with-typescript</code> 规则替换为 <code>eslint-config-standard</code>。</p><pre><code>&quot;lint&quot;: &quot;eslint \&quot;src/**/*.&#123;vue,ts,js&#125;\&quot; --fix&quot;</code></pre><p>.eslintrc.js</p><pre class="javascript"><code>module.exports = &#123;  parser: &#39;vue-eslint-parser&#39;,  parserOptions: &#123;    parser: &#39;@typescript-eslint/parser&#39;,    project: &#39;./tsconfig.json&#39;,    extraFileExtensions: [&#39;.vue&#39;]  &#125;,  extends: [    &#39;plugin:@typescript-eslint/recommended&#39;,    &#39;standard-with-typescript&#39;,    &#39;plugin:vue/vue3-recommended&#39;  ],  root: true,  env: &#123;    node: true  &#125;,  rules: &#123;    &#39;vue/script-setup-uses-vars&#39;: &#39;error&#39;,    &#39;no-console&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,    &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,    &#39;@typescript-eslint/explicit-function-return-type&#39;: &#39;off&#39;,    &#39;@typescript-eslint/explicit-module-boundary-types&#39;: &#39;off&#39;,    &#39;@typescript-eslint/no-explicit-any&#39;: &#39;off&#39;,    &#39;@typescript-eslint/strict-boolean-expressions&#39;: &#39;off&#39;  &#125;,  globals: &#123;    defineProps: &#39;readonly&#39;,    defineEmits: &#39;readonly&#39;,    defineExpose: &#39;readonly&#39;,    withDefaults: &#39;readonly&#39;  &#125;&#125;</code></pre><p>tsconfig.json</p><pre class="json"><code>&#123;  &quot;compilerOptions&quot;: &#123;    &quot;target&quot;: &quot;esnext&quot;,    &quot;useDefineForClassFields&quot;: true,    &quot;module&quot;: &quot;esnext&quot;,    &quot;moduleResolution&quot;: &quot;node&quot;,    &quot;strict&quot;: true,    &quot;jsx&quot;: &quot;preserve&quot;,    &quot;sourceMap&quot;: true,    &quot;resolveJsonModule&quot;: true,    &quot;esModuleInterop&quot;: true,    &quot;lib&quot;: [&quot;esnext&quot;, &quot;dom&quot;]  &#125;,  &quot;include&quot;: [    &quot;src/**/*&quot;,    &quot;.eslintrc.js&quot;,    &quot;vite.config.ts&quot;  ]&#125;</code></pre><h2 id="prettier"><a href="#prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>需要注意的是，Prettier 和 Standard 规范并不完全兼容。</p><pre><code>pnpm add -D \    prettier \    eslint-config-prettier \    eslint-plugin-prettier</code></pre><p>.eslintrc.js</p><pre class="diff"><code> extends: [   &#39;plugin:@typescript-eslint/recommended&#39;,   &#39;standard-with-typescript&#39;,   &#39;plugin:vue/vue3-recommended&#39;,+  &#39;plugin:prettier/recommended&#39; ],</code></pre><p>.prettierrc</p><pre><code>&#123;  &quot;trailingComma&quot;: &quot;none&quot;,  &quot;semi&quot;: false,  &quot;singleQuote&quot;: true&#125;</code></pre><pre><code>&quot;lint&quot;: &quot;eslint \&quot;src/**/*.&#123;vue,ts,js&#125;\&quot; --fix&quot;,&quot;format&quot;: &quot;prettier --write \&quot;src/**/*.&#123;vue,ts,js&#125;\&quot;&quot;</code></pre><h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h2><p>自古以来，Tab or Space 就是不曾停歇的圣战。</p><p>不同成员都有不同的喜好，使用的编辑器/IDE 也不尽相同。那么为了 codebase 的规范，在所有项目成员中使用一个统一的配置是很有必要的。</p><pre><code>root = true[*]charset = utf-8indent_style = spaceindent_size = 2end_of_line = lfinsert_final_newline = truetrim_trailing_whitespace = true[*.&#123;js,jsx,ts,tsx,vue&#125;]indent_style = spaceindent_size = 2trim_trailing_whitespace = trueinsert_final_newline = true</code></pre><h2 id="commitlint"><a href="#commitlint" class="headerlink" title="Commitlint"></a>Commitlint</h2><p>比如很多项目都采用的 Conventional Commits 就要求提交信息必须符合以下规范：</p><pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;[optional body][optional footer(s)]</code></pre><p>为什么要使用 Conventional Commits？</p><ul><li>自动生成 CHANGELOG</li><li>基于提交类型生成语义化版本号</li><li>项目提交历史更清晰</li></ul><h2 id="git-hooks"><a href="#git-hooks" class="headerlink" title="Git Hooks"></a>Git Hooks</h2><p>【鸽了】</p><p>反正就是让上面那些工具可以在 Git 提交时自动执行，检查不通过的就打回。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>还记得很久以前别人给我发了个 Pull Request，我一看，发现有好多地方的代码风格都和我不一样，比如单双引号、分号的使用，还有我最不能忍的 <code>if(xxx)&#123;&#125;</code> 之间不加空格……</p><p>但我想想再叫人家改也怪麻烦的，就默默接受了 PR，然后再默默改成自己的代码风格……</p><p>现在有了这些东西工作流程就规范多了：</p><ul><li>你乱写也行，我直接给你格式化掉；</li><li>语法检查，在编写过程中就排除潜在的 BUG；</li><li>提交上来的代码必须通过以上验证，不然就拒绝；</li><li>提交信息也要规范，不能瞎写乱写。</li></ul><p>当然了，规矩是死的人是活的，这一套下来也没法保证一定万无一失。不过相比以前群魔乱舞的场面，已经省心了不少。</p><p>不过说实在话，比起配置这些工具，推行一个大家都能接受的规范才更难吧（x）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因为课程需要开了几个多人协作的新项目，感觉有必要在团队中强制一下代码规范，免得提交上来的东西对 leader 血压不好。前后端都是 TypeScript 的，所以就用流行的 ESLint + Prettier 组合拳（配合 &lt;a href=&quot;https://standardjs.com/&quot;&gt;Standard&lt;/a&gt; 规范），EditorConfig 同步编辑器配置，再加上 commitlint 规范提交信息，最后用 Git Hooks 实现自动化检查。&lt;/p&gt;
&lt;p&gt;配置虽然不难，但还是有点繁琐的，所以记录一下，如果忘了下次可以翻回来看。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="前端" scheme="https://prinsss.github.io/tag/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用国内镜像加速 Laravel Sail 构建</title>
    <link href="https://prinsss.github.io/laravel-sail-built-with-mirrors/"/>
    <id>https://prinsss.github.io/laravel-sail-built-with-mirrors/</id>
    <published>2021-09-13T16:30:00.000Z</published>
    <updated>2021-09-13T16:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel Sail 是什么？简单来说就是一个基于 Docker 的开发环境。其核心就是一个 <code>docker-compose.yml</code> 配置文件和 <code>sail</code> 脚本，定义了 PHP、MySQL、Redis 等一系列容器，然后把程序放里面跑。</p><p>至于好处嘛，主要就是<strong>使用方便、运行环境统一、不会弄乱系统</strong>。同样是 Laravel 开发，本机安装 LNMP、Valet、Homestead 这些方法我都用过，但现在我肯定首选 Laravel Sail（容器化是真滴爽）。</p><p>不过 Laravel Sail 好是挺好，想要在墙内顺利使用还是要费点功夫的。</p><span id="more"></span><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><blockquote><p>以下操作均在国内网络环境下运行。<del>其实挂个全局代理这些都不是事啦</del></p></blockquote><p>安装 Docker 和配置 Docker Hub 国内镜像的步骤可以参考<a href="https://yeasy.gitbook.io/docker_practice/install/mirror">这篇文章</a>。</p><p>创建项目时，直接用 Laravel 官方的<a href="https://laravel.com/docs/8.x/installation">安装脚本</a>大概率会卡在 Updating dependencies 上，为什么你懂的。不过我们还是可以借鉴下官方脚本的内容：</p><pre class="bash"><code>curl -s https://laravel.build/example-app -o install.sh</code></pre><p>临时新建一个 composer 容器：</p><pre class="bash"><code>docker run -it --rm -v $(pwd):/opt -w /opt \  laravelsail/php80-composer:latest bash</code></pre><p>在容器内配置 composer 镜像，创建 Laravel 项目：</p><pre class="bash"><code>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/laravel new example-app</code></pre><p>安装 Laravel Sail 相关文件（这里可自定义需要使用的服务）：</p><pre class="bash"><code>cd example-appphp ./artisan sail:install --with=mysql,redis,meilisearch,mailhog,selenium</code></pre><p>导出底层 Dockerfile，方便后续定制：</p><pre class="bash"><code>php ./artisan sail:publish</code></pre><p>完成后，可以看到项目下多出了一个 <code>docker</code> 目录和 <code>docker-compose.yml</code> 文件。</p><h2 id="定制-dockerfile"><a href="#定制-dockerfile" class="headerlink" title="定制 Dockerfile"></a>定制 Dockerfile</h2><p>Laravel Sail 有一个主要的容器，用于运行 PHP 主程序。其他比如 <code>composer</code>, <code>artisan</code>, <code>node</code>, <code>npm</code> 命令也是在这个容器里运行的。</p><blockquote><p>后续你可以通过 <code>sail shell</code> 来访问这个容器。</p></blockquote><p>这个主容器的 <a href="https://github.com/laravel/sail/blob/1.x/runtimes/8.0/Dockerfile">Dockerfile</a> 就是我们上面导出的那个。可以看到它主要就是在 Ubuntu 的基础上安装了一些软件包，大部分的网络问题都是这里造成的。</p><p>使用国内镜像替换之，主要需要替换的软件源有：</p><ul><li>Ubuntu</li><li>PPA</li><li>Composer</li><li>Node.js</li><li>Npm</li></ul><p>修改后的 Dockerfile 如下：</p><pre class="dockerfile"><code>FROM ubuntu:21.04LABEL maintainer=&quot;Taylor Otwell&quot;ARG WWWGROUPWORKDIR /var/www/htmlENV DEBIAN_FRONTEND noninteractiveENV TZ=Asia/ShanghaiENV APT_MIRROR http://mirrors.ustc.edu.cnENV NVM_DIR /usr/local/nvmENV NODE_VERSION 16.9.1ENV NVM_NODEJS_ORG_MIRROR https://mirrors.ustc.edu.cn/nodeENV NVM_SOURCE https://hub.fastgit.org/nvm-sh/nvm.gitSHELL [&quot;/bin/bash&quot;, &quot;-o&quot;, &quot;pipefail&quot;, &quot;-c&quot;]RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezoneRUN echo &#39;APT::Acquire::Retries &quot;5&quot;;&#39; &gt; /etc/apt/apt.conf.d/80-retries \  &amp;&amp; sed -i &quot;s|http://archive.ubuntu.com|$APT_MIRROR|g; s|http://security.ubuntu.com|$APT_MIRROR|g&quot; /etc/apt/sources.list \  &amp;&amp; sed -i &quot;s|http://ports.ubuntu.com|$APT_MIRROR|g&quot; /etc/apt/sources.list \  &amp;&amp; apt-get update \  &amp;&amp; apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python2 \  &amp;&amp; mkdir -p ~/.gnupg \  &amp;&amp; chmod 600 ~/.gnupg \  &amp;&amp; echo &quot;disable-ipv6&quot; &gt;&gt; ~/.gnupg/dirmngr.conf \  &amp;&amp; apt-key adv --homedir ~/.gnupg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys E5267A6C \  &amp;&amp; apt-key adv --homedir ~/.gnupg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C300EE8C \  # PHP  &amp;&amp; echo &quot;deb https://launchpad.proxy.ustclug.org/ondrej/php/ubuntu hirsute main&quot; &gt; /etc/apt/sources.list.d/ppa_ondrej_php.list \  &amp;&amp; apt-get update \  &amp;&amp; apt-get install -y php8.0-cli php8.0-dev \    php8.0-pgsql php8.0-sqlite3 php8.0-gd \    php8.0-curl php8.0-memcached \    php8.0-imap php8.0-mysql php8.0-mbstring \    php8.0-xml php8.0-zip php8.0-bcmath php8.0-soap \    php8.0-intl php8.0-readline php8.0-pcov \    php8.0-msgpack php8.0-igbinary php8.0-ldap \    php8.0-redis php8.0-swoole php8.0-xdebug \  # Composer  &amp;&amp; curl -so /usr/bin/composer https://mirrors.aliyun.com/composer/composer.phar \  &amp;&amp; chmod a+x /usr/bin/composer \  &amp;&amp; composer --version \  &amp;&amp; composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ \  # Node.js  &amp;&amp; mkdir -p $NVM_DIR \  &amp;&amp; curl -so- https://raw.fastgit.org/nvm-sh/nvm/v0.38.0/install.sh | bash \  &amp;&amp; source $NVM_DIR/nvm.sh \  &amp;&amp; nvm install $NODE_VERSION \  &amp;&amp; nvm use $NODE_VERSION \  &amp;&amp; node -v &amp;&amp; npm -v \  &amp;&amp; npm config set registry https://registry.npm.taobao.org \  # Yarn  &amp;&amp; npm install --global yarn \  &amp;&amp; yarn config set registry https://registry.npm.taobao.org \  &amp;&amp; apt-get install -y mysql-client \  &amp;&amp; apt-get install -y postgresql-client \  &amp;&amp; apt-get -y autoremove \  &amp;&amp; apt-get clean \  &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modulesENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATHRUN setcap &quot;cap_net_bind_service=+ep&quot; /usr/bin/php8.0RUN groupadd --force -g $WWWGROUP sailRUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sailCOPY start-container /usr/local/bin/start-containerCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.confCOPY php.ini /etc/php/8.0/cli/conf.d/99-sail.iniRUN chmod +x /usr/local/bin/start-containerEXPOSE 8000ENTRYPOINT [&quot;start-container&quot;]</code></pre><p>目前有个不足之处就是 Node.js 的安装，原来用的 <a href="https://github.com/nodesource/distributions">NodeSource</a> 现在没有可用的国内镜像源，只能改用 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。但是 nvm 在 <code>PATH</code> 的处理上有些问题（它是通过一个脚本修改环境变量，把当前启用的 Node 版本添加到 <code>PATH</code> 里去，但是 Dockerfile 里不能动态设置 <code>ENV</code>），目前只能手动指定要安装的 Node 版本了。</p><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>使用 Laravel Sail 提供的脚本运行容器：</p><pre class="bash"><code>./vendor/bin/sail up</code></pre><p>这个脚本主要的工作就是读取 <code>.env</code> 里配置的环境变量，然后通过 <code>docker-compose</code> 在容器里执行相应命令，所以基本用法和 <code>docker-compose</code> 是一致的：</p><pre class="bash"><code>sail up -d  # 后台运行sail down   # 停止运行</code></pre><p>耐心等待镜像构建完成，Laravel Sail 就可以正常运行啦。</p><pre class="nohighlight"><code>Creating network &quot;example-app_sail&quot; with driver &quot;bridge&quot;Creating example-app_redis_1       ... doneCreating example-app_selenium_1    ... doneCreating example-app_meilisearch_1 ... doneCreating example-app_mailhog_1      ... doneCreating example-app_mysql_1       ... doneCreating example-app_laravel.test_1 ... done</code></pre><p><img src="/laravel-sail-built-with-mirrors/laravel-sail-app.png" alt="laravel-sail-app" /></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/articles/56987">将 Laravel 开发环境由 Homestead 迁移到 Laravel Sail (Docker) 完整详细教程</a></li><li><a href="https://laravel.com/docs/8.x/sail">Laravel Sail - Laravel - The PHP Framework For Web Artisans</a></li><li><a href="https://gist.github.com/remarkablemark/aacf14c29b3f01d6900d13137b21db3a">Install node and npm with nvm using Docker.</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Laravel Sail 是什么？简单来说就是一个基于 Docker 的开发环境。其核心就是一个 &lt;code&gt;docker-compose.yml&lt;/code&gt; 配置文件和 &lt;code&gt;sail&lt;/code&gt; 脚本，定义了 PHP、MySQL、Redis 等一系列容器，然后把程序放里面跑。&lt;/p&gt;
&lt;p&gt;至于好处嘛，主要就是&lt;strong&gt;使用方便、运行环境统一、不会弄乱系统&lt;/strong&gt;。同样是 Laravel 开发，本机安装 LNMP、Valet、Homestead 这些方法我都用过，但现在我肯定首选 Laravel Sail（容器化是真滴爽）。&lt;/p&gt;
&lt;p&gt;不过 Laravel Sail 好是挺好，想要在墙内顺利使用还是要费点功夫的。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="Laravel" scheme="https://prinsss.github.io/tag/Laravel/"/>
    
    <category term="Docker" scheme="https://prinsss.github.io/tag/Docker/"/>
    
  </entry>
  
  <entry>
    <title>博客主题可以自动切换深色模式啦</title>
    <link href="https://prinsss.github.io/blog-theme-dark-mode/"/>
    <id>https://prinsss.github.io/blog-theme-dark-mode/</id>
    <published>2021-08-08T19:05:00.000Z</published>
    <updated>2021-08-08T19:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我也很佩服自己，这么简单的一个功能，写写也就几个小时，一年多前就想搞了，竟然给我拖到现在才装上去。拖延症，恐怖如斯！</p><p>以前我对深色模式其实不怎么感冒，主要感觉开了也没啥用，就系统界面变黑了，其他 App 里还是白色的，等于没开。不过这几年大部分应用的适配都跟上来了，体验也就好起来了，晚上玩手机看着不那么刺眼，挺好的。</p><p>现在浏览器网页也支持检测用户的系统主题色，所以我也凑个热闹，给博客加上了自动切换浅色/深色主题的功能。适配过程还是挺顺利的，记录一下供参考。</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>就是使用 CSS 的 <code>prefers-color-scheme</code> 媒体查询。</p><pre class="css"><code>@media (prefers-color-scheme: dark) &#123;  /* dark theme styles go here */&#125;</code></pre><p>参考文档：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme">prefers-color-scheme - CSS | MDN</a></p><p>不过需要注意的是，<a href="https://caniuse.com/?search=prefers-color-scheme">不支持 IE</a>。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>最简单的例子：</p><pre class="css"><code>body &#123;  background-color: white;  color: black;&#125;@media (prefers-color-scheme: dark) &#123;  body &#123;    background-color: black;    color: white;  &#125;&#125;</code></pre><p>这样在亮色模式下是白底黑字，在暗色模式下就是黑底白字。</p><p>依样画葫芦，给原主题中颜色相关的 CSS 加上对应的深色样式就差不多了。</p><h2 id="使用-mixin-处理颜色"><a href="#使用-mixin-处理颜色" class="headerlink" title="使用 mixin 处理颜色"></a>使用 mixin 处理颜色</h2><p>拿我自己写的这个<a href="https://github.com/prinsss/hexo-theme-murasaki">主题</a>举例，在主题中我们一般会用到很多颜色。一个常见的做法就是使用 CSS 预处理器，把这些颜色定义成变量方便后续使用（我用的是 <a href="https://stylus-lang.com/">Stylus</a>）：</p><pre class="stylus"><code>$color-primary        = convert(hexo-config(&#39;primary_color&#39;));$color-background     = #fff;$color-text           = #333;$color-text-secondary = #999;</code></pre><p>同样，定义这些颜色的深色版本：</p><pre class="stylus"><code>$color-primary-dark        = convert(hexo-config(&#39;primary_color_dark&#39;));$color-background-dark     = #181a1b;$color-text-dark           = #c8c3bc;$color-text-secondary-dark = #a8a095;</code></pre><p>引用之：</p><pre class="stylus"><code>body &#123;  background-color: $color-background;  color: $color-text;&#125;a &#123;  color: $color-primary;&#125;@media (prefers-color-scheme: dark) &#123;  body &#123;    background-color: $color-background-dark;    color: $color-text-dark;  &#125;  a &#123;    color: $color-primary-dark;  &#125;&#125;</code></pre><p>然而问题来了，这样岂不是要写很多媒体查询语句？麻烦且不说，看着都眼花。如果把不同地方的这些语句集中起来，放在一起，又会破坏模块设计，也不利于后续维护。</p><p>想要写得简洁一点，不妨利用 CSS 预处理器的 <a href="https://stylus-lang.com/docs/mixins.html">mixin 特性</a>。</p><p>定义 mixin（可以理解为可重用的代码片段）：</p><pre class="stylus"><code>// 根据传入参数拼装变量名color-themed(name) &#123;  color: lookup(&#39;$color-&#39; + name);  @media (prefers-color-scheme: dark) &#123;    color: lookup(&#39;$color-&#39; + name + &#39;-dark&#39;);  &#125;&#125;</code></pre><p>这个 mixin 的意思就是我们传一个名称进去，它会根据这个名称去查找对应的颜色变量及其深色版本，然后一起应用。</p><p>如此一来，上面的样式就可以简化为：</p><pre class="stylus"><code>body &#123;  background-color-themed: &#39;background&#39;;  color-themed: &#39;text&#39;;&#125;a &#123;  color-themed: &#39;primary&#39;;&#125;</code></pre><h2 id="使用-css-变量处理颜色"><a href="#使用-css-变量处理颜色" class="headerlink" title="使用 CSS 变量处理颜色"></a>使用 CSS 变量处理颜色</h2><p>用上面那种方法，比原来的是好了不少，但感觉不太直观。</p><p>另一种方法，就是用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">CSS 原生的变量机制</a>来处理颜色。定义变量：</p><pre class="css"><code>:root &#123;  --color-primary: #7065a3;  --color-background: #fff;  --color-text: #333;  --color-text-secondary: #999;&#125;@media (prefers-color-scheme: dark) &#123;  :root &#123;    --color-primary: #bb86fc;    --color-background: #181a1b;    --color-text: #c8c3bc;    --color-text-secondary: #a8a095;  &#125;&#125;</code></pre><p>使用：</p><pre class="css"><code>body &#123;  background-color: var(--color-background);  color: var(--color-text);&#125;a &#123;  color: var(--color-primary);&#125;</code></pre><p>是不是清爽了很多呢？</p><p>不过遗憾的是，IE 浏览器<a href="https://caniuse.com/css-variables">不支持 CSS 变量</a>。（又是你！！！🙃</p><p>所以为了兼容性我还是选了预处理器 + mixin 的方法，这样在 IE 上虽然不能自动切换，但至少能保证默认的浅色主题是可以正常显示的。而如果全部使用 CSS 变量的话，在不支持的浏览器上就啥都没有了，得考虑 polyfill 和 fallback，还是算了。</p><p>如果不用考虑兼容旧浏览器的话，CSS 变量是最佳选择。</p><h2 id="加载外部样式"><a href="#加载外部样式" class="headerlink" title="加载外部样式"></a>加载外部样式</h2><p>使用 <code>link</code> 标签加载的外部 CSS 也可以<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-media">指定媒体查询</a>。</p><p>比如本主题使用的 <a href="https://highlightjs.org/">highlight.js</a> 代码高亮的样式：</p><pre class="html"><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;atom-one-dark.min.css&quot; media=&quot;screen and (prefers-color-scheme: dark)&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;atom-one-light.min.css&quot; media=&quot;screen and (prefers-color-scheme: light)&quot;&gt;</code></pre><p>这样在浅色模式下会加载 light 样式，在深色模式下会加载 dark 样式。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>另外，关于深色模式下的图片要如何处理，其实也是需要考虑的。</p><p>不过我懒，就直接不管了。更详细的相关内容可以参考：</p><ul><li><a href="https://blog.jxck.io/entries/2018-11-10/dark-mode-via-prefers-color-scheme.html">prefers-color-scheme を用いた Dark Mode 対応と User Preference Media Features | blog.jxck.io</a></li><li><a href="https://web.dev/prefers-color-scheme/">prefers-color-scheme: Hello darkness, my old friend</a></li></ul><p>最后是自动切换的效果图（视频）：</p><video src="./dark-mode-switch.mp4" autoplay muted loop></video>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候我也很佩服自己，这么简单的一个功能，写写也就几个小时，一年多前就想搞了，竟然给我拖到现在才装上去。拖延症，恐怖如斯！&lt;/p&gt;
&lt;p&gt;以前我对深色模式其实不怎么感冒，主要感觉开了也没啥用，就系统界面变黑了，其他 App 里还是白色的，等于没开。不过这几年大部分应用的适配都跟上来了，体验也就好起来了，晚上玩手机看着不那么刺眼，挺好的。&lt;/p&gt;
&lt;p&gt;现在浏览器网页也支持检测用户的系统主题色，所以我也凑个热闹，给博客加上了自动切换浅色/深色主题的功能。适配过程还是挺顺利的，记录一下供参考。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="博客" scheme="https://prinsss.github.io/tag/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="前端" scheme="https://prinsss.github.io/tag/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>最近考的几个证：软考、N1 和驾照</title>
    <link href="https://prinsss.github.io/several-certificates-got-recently/"/>
    <id>https://prinsss.github.io/several-certificates-got-recently/</id>
    <published>2021-08-02T08:16:00.000Z</published>
    <updated>2021-08-02T08:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习使我快乐。才怪。</p><p>要不是为了多少增加点竞争力，我又何必折腾自己去考这些证。快要大学毕业找工作了，最近这段时间明显感觉自己比以前焦虑了不少。俗话说得好，打不过就加入。虽然也不知道这些证以后能不能派上用场，不过总比没有好，万一用上那就是赚了。</p><p>这次考的几个其实我都没有花很多时间准备，不过所幸还是都拿到手了。所以记录一下感想，也顺便给博客除除草。在网上说这些其实无异于增加实名上网的风险……不过 fxck it，随他去吧。</p><span id="more"></span><h2 id="软考"><a href="#软考" class="headerlink" title="软考"></a>软考</h2><p><strong>软考是什么？</strong></p><p>软考也叫软件水平考试，全称计算机技术与软件专业技术资格（水平）考试，是由国家人力资源和社会保障部、工业和信息化部领导的国家级考试。</p><p><strong>有什么用？</strong></p><p>国企评职称、积分落户、写简历上唬人。</p><p><strong>有哪些项目？</strong></p><p>软考有高级、中级、初级三种级别，每个级别中又有不同的资格设置。比如高级就有分为信息系统项目管理师、系统分析师、系统架构设计师、网络规划设计师、系统规划与管理师。完整列表可以看<a href="https://www.ruankao.org.cn/introduction/zgsz">这里</a>。</p><p>据我观察，高级里报的人最多的是<strong>信息系统项目管理师</strong>（俗称高项），中级的是<strong>软件设计师</strong>，初级都没啥人报，可能是太简单了没含金量吧。</p><p><strong>考试安排？</strong></p><p>每年考两次，分别安排在上半年和下半年。上半年考试时间为5月下旬，下半年考试时间为11月上旬。</p><p><strong>考试题型？</strong></p><p>考试分为上午场和下午场，初级、中级是上午考基础知识，下午考应用技术。高级则是上午综合知识，下午案例分析加论文。以中级为例，上午题型都是选择题，下午是主观问答题。</p><p>每科目总分都是 75 分，45 分及格，上午下午都考 45 分以上就算过了。</p><p><strong>考试感想？</strong></p><p>就说我报考的软件设计师（中级），感觉不难。考的东西基本都是大学计算机专业课教的那些，<strong>微机原理、程序设计语言、数据结构、操作系统、软件工程、面向对象、算法、数据库、计算机网络</strong>，其他就没啥了，范围广但不深。</p><p>说句欠揍的话，我这次考试的准备时间全部加起来可能都没有三天……倒也不是我自大，就纯粹是拖延症犯了，一直拖啊拖，直到考前一天才开始刷真题（我当时都快放弃了）。最后看了一个通宵，第二天下午的时候差点昏睡考场。</p><p>个人感觉如果大学 CS 专业课都过了的话，那过个软考中级应该还是没啥压力的。考试当天我在考场逛了一下，来考的除了几位头顶显得有些寂寥的大叔，基本上都是大学生。所以趁着专业课学的东西还没忘，直接考掉正好。</p><p><strong>怎么准备？</strong></p><p>首先看一下报考科目的考试大纲（比如：<a href="https://www.educity.cn/rk/2149521.html">2021年软件设计师考试大纲</a>），了解一下大致要考的内容。就像我说的，基本都是大学专业课里教过的东西。</p><p>教材的话有官方指定的教材，比如软件设计师就是《软件设计师教程（第5版）》。这本教材我就是大致浏览了一遍，然后等做题碰到有不会的再来翻书了。</p><p>最重要的是刷题，做历年的真题（网上资源很多）。</p><p>真题看几遍后就能发现很明显的题型规律，比如哪几题会考微机原理，哪几题会考网络、操作系统等等，还有最后 5 题是雷打不动的完形填空，考英语的。至于下午场那就更是换汤不换药了，第一题数据流图，第二题数据库设计，第三题 UML，第四题算法，第五题代码填空 Java/C++ 二选一。</p><p><strong>考完了有用吗？</strong></p><p><img src="/several-certificates-got-recently/i-dont-know.jpg" alt="i-dont-know" /></p><p>至少能证明你计算机专业还是学到点东西的，聊胜于无吧。我这次报了中级没报高级，也是寻思一口不能吃成个胖子，毕竟高级要写的论文我完全没练过，肯定是写不来的。</p><p>这次中级过了，下次有机会就挑战高级吧。</p><h2 id="jlpt-n1"><a href="#jlpt-n1" class="headerlink" title="JLPT N1"></a>JLPT N1</h2><p><strong>N1 是什么？</strong></p><p>日本语能力测试（Japanese-Language Proficiency Test，简称 JLPT）是以母语非日语者为主要对象的日语能力考试。目前考试设有 N1 至 N5 级、共 5 个级别，当中以 N1 级难度最高。</p><p>据我观察，大部分人都是报的 N1、N2，N3 以下就没多少人报了。</p><p><strong>有什么用？</strong></p><p>JLPT 是现时最具认受性的日语能力考试。留学、进外企的时候用得到吧，大概。</p><p>反正是公认知名度、认可度最高的日语考试，蛮考一个放着。</p><p><strong>考试安排？</strong></p><p>每年举办两次，于 7 月和 12 月的第一个星期日实施。</p><p>然而最近因为新冠疫情导致去年 7 月的考试被取消，后来又取消了部分考点，导致现在 JLPT 报名经常「一座难求」，考场座位都得靠抢（我这次运气不错，捡漏抢到了一个）。微博上甚至有个狠人，因为附近的考点名额已满，最后报了个内蒙古的考点……大老远的坐飞机去考试，只能说是够拼的。</p><p>还有，这破考试报名费老他妈贵了，N1、N2 报名费要 550 块，你怎么不去抢！</p><p><img src="/several-certificates-got-recently/nihon-shuuryou.jpg" alt="nihon-shuuryou" /></p><p><strong>考试题型？</strong></p><p>分为语言知识、阅读、听力三部分，全是选择题。</p><p>N1 总分 180，100 分合格（要求每项分数都大于等于 19 分）。</p><p><strong>考试感想？</strong></p><p>不考察口语和写作，而且全是选择题，要及格真的挺简单的。何况我从高中开始自学日语，要是 N1 都考不过那我一头撞死算了。而且过了 N1 但实际水平堪忧的人我这几年也见过不少，所以确实没啥好拿出来说的。</p><p>考试的话，重要的就是词汇、语法和听力。词汇方面不是我吹牛逼，看了这么久的小说漫画动画片，词汇量总归是累积了不少的。语法的话，不少 N1 文法在日常生活中其实不怎么见得到，所以还是要专门看看。听力就不说了，以前看虚拟管人的那段时间算是给我锻炼出来了，就听力考试那字正腔圆的，给我两倍速都没问题好吧。</p><p><strong>考完了有用吗？</strong></p><p>不知道，我从来没有想过这个问题.jpg</p><p>权当自我满足了，证明下自己吧。</p><h2 id="驾照"><a href="#驾照" class="headerlink" title="驾照"></a>驾照</h2><p>嗯……这个真没什么好说的了，写上来凑数的。科一到科四都是一把过，爽到。</p><p>我考的是手动挡 C1 驾照，感想的话就是汽车比想象中的要好开，挂档踩油门就走，踩刹车就停，方向盘转车也跟着转，说实话还挺爽的。以前我就喜欢看发动机、变速箱原理之类的视频，实际上手理解起来也算快。</p><p>不如说学车的时候感觉大部分时间是在学交通规则，比如左转直行右转都有专门车道、红灯也可以右转（除非有右转信号灯）这些都是我学了以后才知道的。另外一点就是发现路上不守交规的人其实挺多的，越实线超车、变道转向不打灯的看到过好多次。以前我也不知道所以没感觉，现在自己开车的时候就看的明白了。</p><p>总之，多个证多一种可能性吧，本拿到了以后有机会就能自驾游了，happy 😋</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习使我快乐。才怪。&lt;/p&gt;
&lt;p&gt;要不是为了多少增加点竞争力，我又何必折腾自己去考这些证。快要大学毕业找工作了，最近这段时间明显感觉自己比以前焦虑了不少。俗话说得好，打不过就加入。虽然也不知道这些证以后能不能派上用场，不过总比没有好，万一用上那就是赚了。&lt;/p&gt;
&lt;p&gt;这次考的几个其实我都没有花很多时间准备，不过所幸还是都拿到手了。所以记录一下感想，也顺便给博客除除草。在网上说这些其实无异于增加实名上网的风险……不过 fxck it，随他去吧。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://prinsss.github.io/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>年轻人的第一次救护车：原来中暑真的会晕倒！</title>
    <link href="https://prinsss.github.io/heat-syncope-and-ambulance/"/>
    <id>https://prinsss.github.io/heat-syncope-and-ambulance/</id>
    <published>2021-07-01T10:20:00.000Z</published>
    <updated>2021-08-14T10:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天一天解锁了好几个人生成就：</p><ul><li>✅ 中暑昏厥</li><li>✅ 被送上救护车</li><li>✅ 进急诊室</li></ul><p>不开玩笑，以我的经历在此提醒各位，一定不能小瞧中暑的危害啊！！</p><span id="more"></span><h2 id="发生了什么"><a href="#发生了什么" class="headerlink" title="发生了什么"></a>发生了什么</h2><p>下午本来我舒舒服服躺在床上玩手机，突然来了一个电话，让我出门办事儿。地方远倒也不远，一公里多，我就寻思弄辆共享单车骑过去，权当锻炼身体了。</p><p>当时天气那叫一个热，估计正好是一天里最热的那段时间，才刚从空调房里出来身上就冒了一层汗，走了不到一百米感觉人都要蔫了。为了打起精神，我也特意选了点欢快的歌在路上听。</p><p>之后嘛，我也不知道吃错了什么药，上了路越骑越起劲，一辆破自行车蹬得飞快，差不多一首歌的时间就到了。就在我锁好车，准备步行过去的时候……</p><p>最开始是轻微的头晕，我也没怎么放在心上。</p><p><strong>然后突然视野开始变得昏暗、扭曲，整个人头晕目眩，意识也恍惚起来</strong>（有点类似于蹲坑蹲久了，然后突然站起来的那种感觉）。要形容的话就是感觉天一下子变黑了，然后套了个重影 + 色差特效的滤镜，天旋地转，根本分不清到底是世界在摇晃还是我人在摇晃。我凭着剩余的思考能力，心想糟糕，八成是刚才骑太猛，现在脑部血液供应不上了。于是晃晃悠悠地想找个东西扶着缓一下。</p><p>结果我下一次睁眼的时候，面前已经是一个不认识的人了。</p><p>我分辨出他是在问我「没事吧？」，<strong>这才忽然意识到，我刚才应该是失去意识晕过去了</strong>，是这位路过的好心人叫醒了我。我赶忙向他道谢，说自己没事，缓一下就好了，于是他也好像稍微放心了的样子。</p><p>然而，我再下一次睁眼的时候，眼前又是那位好心人在问我，「你真的没事吗？要不我帮你打 120 吧」。这我真的没想到，<strong>我竟然又晕过去了一次</strong>……（梅开二度）。这次旁边的人也变多了，一位环卫阿姨和另一位应该也是路过的大姐在担心地看着这边。</p><p>不得不说失去意识的感觉很神奇。在我主观感受中，两次昏厥好像都是眼睛一闭一睁的事儿，前一秒我还在锁共享单车，下一秒人就在地上了，再下一秒他就打 120 了。我只能从他停在一旁的电瓶车推断出，他是先走远了，然后发现我又昏倒后再折回来帮我的。我却完全不知道这之间经过了多久，真的很感谢这几位好心人。🙏</p><p>在等救护车的途中，我的意识也开始逐渐恢复了：两只耳机都还挂在耳朵上，放着曲调轻快<del>（害人）</del>的爱抖露曲；检查了一下全身，手肘、膝盖都有不少擦伤，应该是倒地的时候留下的；呼吸急促，身体出汗量很大，衣服都湿了。</p><p>之后救护车到了，我也清醒得差不多了，不过为了以防万一还是给拉去医院挂了急诊（<strong>长这么大，人生中第一次被救护车拉走……</strong>），做了一大票检查，血常规呀 CT 啥的，先后排除了：低血压、低血糖、心脏病、脑部等问题，最后医生得出结论：</p><blockquote><p>应该就是中暑了。</p></blockquote><h2 id="中暑真的会昏厥"><a href="#中暑真的会昏厥" class="headerlink" title="中暑真的会昏厥"></a>中暑真的会昏厥</h2><p>以前我也有所耳闻，比如军训时有某某同学晕倒了，但没想到有这么夸张。</p><p>从医院回来以后我查了点资料，感觉我这种症状可能是属于「<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%9A%91#%E7%86%B1%E5%A4%B1%E7%A5%9E">热失神</a>」：</p><ul><li>原因：多发于直射日光下长时间活动或高温高湿的室内<sup><a href="https://ja.wikipedia.org/wiki/%E7%86%B1%E4%B8%AD%E7%97%87#%E7%86%B1%E5%A4%B1%E7%A5%9E%EF%BC%88heat_syncope%EF%BC%89">[1]</a></sup>。由于流汗引致的脱水和末端血管的扩张，全身的血液循环降低而导致。</li><li>症状：意识在突然之间消失。体温比平常的高，明显地流汗，脉搏呈现徐脉（缓慢的脉搏）。</li></ul><p>搜集的一些相关资料：</p><ul><li><a href="https://www.msdmanuals.cn/home/heart-and-blood-vessel-disorders/symptoms-of-heart-and-blood-vessel-disorders/fainting">晕厥 - 心脏和血管疾病 - 《默沙东诊疗手册家庭版》</a></li><li><a href="https://www.msdmanuals.cn/home/quick-facts-injuries-and-poisoning/heat-disorders/heatstroke">小知识: 中暑 - 《默沙东诊疗手册家庭版》</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%9A%91">中暑 - 维基百科，自由的百科全书</a></li><li><a href="http://wsjkw.sh.gov.cn/zyfhyzybfz/20200819/fcdd9fc348124c46ba86a996d38280d0.html">夏季中暑的防与治 - 上海市卫生健康委员会</a></li><li><a href="https://www.wbgt.env.go.jp/zh-cn/doc_prevention.php">预防中暑/措施 - 环境省</a></li><li><a href="https://www.cdc.gov/niosh/topics/heatstress/heatrelillness.html">Heat Stress Related Illness | NIOSH | CDC</a></li></ul><p>在我的印象里应该是要重度中暑，比如在阳光下暴晒、高温环境长时间工作那样的人才会晕倒，没想到我这就出门骑个自行车人也倒了。人类的身体真是脆弱啊……</p><p>而且我这次算是比较幸运的，下了车走在马路牙子上才晕倒。<strong>如果是骑着骑着失去意识，给哪里磕个一下的话，那真是想想都觉得后怕。</strong></p><p>反省这次的事件，主要问题应该就是：</p><ul><li>之前一直待在空调房里，突然出门温度不适应；</li><li>骑车太快，日照、高温下剧烈运动；</li><li>听歌导致注意力涣散，没有及时察觉身体异常。</li></ul><p>早知道还不如打个车去，屁事没有。</p><p><img src="/heat-syncope-and-ambulance/ac-meme.jpg" alt="ac-meme" /></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>说实在话，我以前确实没觉得中暑有多严重，这次算是给我吃了个教训。</p><p>希望各位读者也能以我这次的经历为戒，不要小看中暑，炎热天气出门做好预防呀！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天一天解锁了好几个人生成就：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ 中暑昏厥&lt;/li&gt;
&lt;li&gt;✅ 被送上救护车&lt;/li&gt;
&lt;li&gt;✅ 进急诊室&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不开玩笑，以我的经历在此提醒各位，一定不能小瞧中暑的危害啊！！&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://prinsss.github.io/categories/essay/"/>
    
    
    <category term="踩坑" scheme="https://prinsss.github.io/tag/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>AbemaTV 网页版与客户端强制 1080p</title>
    <link href="https://prinsss.github.io/abematv-force-1080p/"/>
    <id>https://prinsss.github.io/abematv-force-1080p/</id>
    <published>2021-04-25T21:30:00.000Z</published>
    <updated>2021-04-25T22:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看动画<a href="https://zombielandsaga.com/">《佐贺偶像是传奇 卷土重来》</a>（ゾンビランドサガ リベンジ），官方的同步网络放送有 Amazon Prime Video 和 AbemaTV。因为我已经订阅 Netflix 了，感觉 Prime Video 不怎么用得到，所以还是用免费的 Abema 吧。</p><p>然而 Abema 很不爽的一点就是动态分辨率（不如说很多流媒体网站都这样），就喜欢自己判断你网速够不够，然后给你播放带宽相应的清晰度。初衷估计是为了任何网络环境条件下都能流畅播放，可是讲道理，我就没见过这个自动判断准过几次。</p><p>就算在设置里开到最高画质，还是动不动给我跳到 480p 甚至是 360p。我他喵的到底是哪里不行，就只配看你这马赛克画质？</p><span id="more"></span><p>真是叔可忍婶不可忍，于是我去网上找有没有 Abema 强制 1080p 的方法（因为也有个 Chrome 启用 Netflix 1080p 的扩展），<a href="https://gist.github.com/Last-Order/43199b7a701fc94e800c2de0ed021f1c">正好找到了一个</a>：</p><pre class="js"><code>const open = XMLHttpRequest.prototype.open;XMLHttpRequest.prototype.open = function () &#123;  arguments[1] = arguments[1].replace(&#39;720/playlist.m3u8&#39;, &#39;1080/playlist.m3u8&#39;);  open.apply(this, arguments);&#125;;</code></pre><p>看了一下，没想到原理还挺简单，就是油猴脚本劫持 XHR 请求方法，把其他清晰度的 m3u8 playlist 全部重定向到 1080p 的 playlist 上。这样不管怎样请求，实际返回的都是 1080p 清晰度的源了。想想确实是这个理，高啊！</p><p>还好以前捣鼓过一段时间 HLS 相关的东西，所以这些不算陌生。不过实际使用的时候发现 <code>XMLHttpRequest</code> 并没有拦截到 <code>playlist.m3u8</code> 之类的请求，看了一下，原来是 Abema 请求的时候改用了 fetch API。反正大同小异，稍微修改一下就行了。</p><p>修改后的脚本同样放在 <a href="https://gist.github.com/prinsss/0c7730cdac336dfeddd3f22da6ad08a5">Gist</a> 上：</p><pre class="js"><code>// ==UserScript==// @name Abema 强制 1080p// @description 把其他清晰度的播放列表强制指向1080p// @version 1.1.0// @run-at document-start// @namespace Violentmonkey Scripts// @match https://abema.tv/*// @grant none// ==/UserScript==const originalFetch = window.fetchwindow.fetch = (...args) =&gt; &#123;  const regex = /\/\d+\/playlist\.m3u8/  if (typeof args[0] === &#39;string&#39; &amp;&amp; args[0].match(regex)) &#123;    args[0] = args[0].replace(regex, &#39;/1080/playlist.m3u8&#39;)    console.log(args[0])  &#125;  return originalFetch(...args)&#125;</code></pre><p>题外话，好久没追过新番了，但佐贺二期开播后我现在每天都想快进到周四……</p><p>啊啊啊！</p><p><img src="/abematv-force-1080p/zombieland-saga-revenge-ep3.jpg" alt="zombieland-saga-revenge-ep3" /></p><p>好了，网页端的问题解决了，那么客户端是不是也可以用这个方法呢？</p><p>抓包看了一下，客户端请求的确实是同样的 URL，直接如法炮制。</p><p>不过要修改客户端的请求就不像 Web 浏览器那么简单了，需要用到 MitM（中间人）攻击。目前 iOS 平台上主流的代理软件应该都支持 MitM，比如 Surge/Quantumult X/Shadowrocket。下面以 <a href="https://github.com/crossutility/Quantumult-X">Quantumult X</a> 为例。</p><p>开启 MitM 功能，添加主机名如下：</p><blockquote><p>更新：网页版和手机版请求的是 <code>vod-abematv.akamaized.net</code>，iPad 上请求的是 <code>ds-vod-abematv.akamaized.net</code>，搞不懂，直接通配符算了。</p></blockquote><pre class="text"><code>*abematv.akamaized.net</code></pre><p>安装并信任证书（过程略），修改配置文件，添加重写规则：</p><pre class="ini"><code>[rewrite_local]abematv\.akamaized\.net/.+/\d+/playlist\.m3u8 url request-header /\d+/playlist.m3u8 request-header /1080/playlist.m3u8</code></pre><p>验证强制 1080p 是否成功（开启 HTTP 调试功能查看）：</p><p><img src="/abematv-force-1080p/quantumult-x-rewrite.jpg" alt="quantumult-x-rewrite" /></p><p>可以看到原本是要加载 720p 的，经过重写后实际加载的是 1080p 的 segment。</p><p>爽！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在看动画&lt;a href=&quot;https://zombielandsaga.com/&quot;&gt;《佐贺偶像是传奇 卷土重来》&lt;/a&gt;（ゾンビランドサガ リベンジ），官方的同步网络放送有 Amazon Prime Video 和 AbemaTV。因为我已经订阅 Netflix 了，感觉 Prime Video 不怎么用得到，所以还是用免费的 Abema 吧。&lt;/p&gt;
&lt;p&gt;然而 Abema 很不爽的一点就是动态分辨率（不如说很多流媒体网站都这样），就喜欢自己判断你网速够不够，然后给你播放带宽相应的清晰度。初衷估计是为了任何网络环境条件下都能流畅播放，可是讲道理，我就没见过这个自动判断准过几次。&lt;/p&gt;
&lt;p&gt;就算在设置里开到最高画质，还是动不动给我跳到 480p 甚至是 360p。我他喵的到底是哪里不行，就只配看你这马赛克画质？&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="UserScript" scheme="https://prinsss.github.io/tag/UserScript/"/>
    
    <category term="音视频" scheme="https://prinsss.github.io/tag/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 Eagle 管理各种图片素材</title>
    <link href="https://prinsss.github.io/organize-images-with-eagle/"/>
    <id>https://prinsss.github.io/organize-images-with-eagle/</id>
    <published>2021-04-16T19:15:00.000Z</published>
    <updated>2021-04-16T19:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道各位有没有遇到过这种问题？</p><p>上网冲浪存了好多沙雕梗图，有时候突然感觉其中一张图能派上用场，但想找却怎么也找不到，也不知道当初存哪里去了；</p><p>大事小事都喜欢截图，玩游戏截图，看动画片也截图，截了一大堆到头来也不怎么用，乱七八糟的混在一起，删了又感觉怪可惜的；</p><p>看到喜欢的图总之先右键保存（话说现在是不是已经不兴说「右键保存」了，「长按保存」可能还更普遍一点，大人时代变啦），久而久之图库越来越大，又分散在硬盘的不同角落，整理起来也愈发力不从心……</p><p>啊。没有吗。好吧。🥲</p><p>说正经的，如果你也有很多图片需要管理，那么你应该试试 <a href="https://cn.eagle.cool/">Eagle</a> 这款软件。</p><span id="more"></span><hr /><p>为什么呢？</p><p>如果单纯依靠文件系统整理（用文件夹分类），缺点还是很明显的：</p><ul><li>一张图片只能属于一个分类，除非复制多份；</li><li>不能给图片加标签、备注；</li><li>浏览切换目录不方便，需要借助其他看图软件；</li><li>目录下图片太多容易把 Explorer/Finder 卡住。</li></ul><p>使用专业的素材管理软件，可以解决绝大多数的这种问题。</p><p>当然了，这种类型的软件不只有 Eagle 一个。但是我只用过 Eagle，所以就不推荐其他的啦。如果有更好的选择，欢迎在评论区告诉我。</p><p><img src="/organize-images-with-eagle/eagle-website-screenshot.jpg" alt="eagle-website-screenshot" /></p><p>我目前用到的功能基本上有这些：</p><ul><li>分类、标签、备注</li><li>按颜色、图片尺寸等筛选</li><li>瀑布流浏览</li><li><strong>重复图片检查</strong></li><li>浏览器扩展拖拽保存网页图片</li></ul><p>以我自己的体验来说，比起原来用文件管理的时候，真的舒适了太多。相见恨晚啊！</p><p>比如下面是我珍藏的<del>（到处偷来的）</del>小叮当图：</p><p><img src="/organize-images-with-eagle/eagle-library-memes.jpg" alt="eagle-library-memes" /></p><p>还有这几天在看<del>（吹）</del>的<a href="https://bgm.tv/subject/252655">《佐贺偶像是传奇》</a>：</p><p><img src="/organize-images-with-eagle/eagle-library-screenshots.jpg" alt="eagle-library-screenshots" /></p><p>不过有一点遗憾的是，目前在手机上还没有浏览 Eagle 资源库的办法。</p><p>Eagle 资源库的目录结构是这样的：</p><pre class="text"><code>我的图库.library├── images│   ├── KEZAL1JG0RN32.info│   │   ├── IMG_1507.png│   │   ├── IMG_1507_thumbnail.png│   │   └── metadata.json│   ├── KEZAL1JG2YXNI.info│   │   ├── 我太菜了 对不起.jpg│   │   └── metadata.json│   ├── KEZAL1JG34XY6.info│   │   ├── 可恶 你们这些被资本主义毒惑到骨子里的猪.jpg│   │   └── metadata.json│   ├── KEZAL1JG4HFBR.info│   │   ├── illust_71093876_20191005_193032.jpg│   │   ├── illust_71093876_20191005_193032_thumbnail.png│   │   └── metadata.json...</code></pre><p>每张图片外面都包了一个文件夹，包括分类、文件夹层级等元信息都存在里面的 <code>metadata.json</code> 中，从外界无法直接浏览（这也是为部分人所诟病的一点）。</p><p>而官方似乎也没有出移动端 App 的打算……</p><p>一个妥协的办法就是使用 Eagle 的导出功能，导出成正常目录结构，然后放到手机上（可以用 Documents 等应用从电脑自动同步）。</p><p><img src="/organize-images-with-eagle/eagle-export-sync.jpg" alt="eagle-export-sync" /></p><p>这样算是勉强能看，不过到底还是不方便。</p><p>前段时间看到 Eagle <a href="https://www.yuque.com/augus-gsjgn/eagle-api">公开了 API</a>，本来想弄个简陋的网页客户端，写了个小 demo，倒是确实能浏览图库了。所以功能实现估计是没什么障碍的，奈何后来犯懒，一直搁置到现在，只能有缘再说了。</p><p>最后，Eagle 是<a href="https://cn.eagle.cool/store">收费软件</a>，¥199 两台设备，终身授权，学生有教育优惠。</p><p>如果你有图片整理需求的话，去试用一下吧，不会亏的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不知道各位有没有遇到过这种问题？&lt;/p&gt;
&lt;p&gt;上网冲浪存了好多沙雕梗图，有时候突然感觉其中一张图能派上用场，但想找却怎么也找不到，也不知道当初存哪里去了；&lt;/p&gt;
&lt;p&gt;大事小事都喜欢截图，玩游戏截图，看动画片也截图，截了一大堆到头来也不怎么用，乱七八糟的混在一起，删了又感觉怪可惜的；&lt;/p&gt;
&lt;p&gt;看到喜欢的图总之先右键保存（话说现在是不是已经不兴说「右键保存」了，「长按保存」可能还更普遍一点，大人时代变啦），久而久之图库越来越大，又分散在硬盘的不同角落，整理起来也愈发力不从心……&lt;/p&gt;
&lt;p&gt;啊。没有吗。好吧。🥲&lt;/p&gt;
&lt;p&gt;说正经的，如果你也有很多图片需要管理，那么你应该试试 &lt;a href=&quot;https://cn.eagle.cool/&quot;&gt;Eagle&lt;/a&gt; 这款软件。&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://prinsss.github.io/categories/diary/"/>
    
    
    <category term="分享" scheme="https://prinsss.github.io/tag/%E5%88%86%E4%BA%AB/"/>
    
    <category term="安利" scheme="https://prinsss.github.io/tag/%E5%AE%89%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>尝试为本地视频开启 AirPods Pro 空间音频</title>
    <link href="https://prinsss.github.io/spatial-audio-for-local-videos/"/>
    <id>https://prinsss.github.io/spatial-audio-for-local-videos/</id>
    <published>2021-03-05T12:04:00.000Z</published>
    <updated>2021-03-05T12:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>继 <a href="https://prinsss.github.io/airpods-2-are-great/">AirPods 2</a> 之后，前段时间我又没忍住，入手了传说中的<del>豌豆射手</del> AirPods Pro。</p><p>第一次体验到的「主动降噪」功能确实惊艳，虽然感觉对人声的处理还是差了点意思，但开和不开真的是两种完全不同的感受。尤其是乘坐公共交通的时候，感觉是终于夺回了一点耳朵的主导权，不用再一味地被各种噪声强奸了。</p><p>用了几个月，总的来说挺满意的，就是这人声降噪实在是普通，近处的人说话大声点就挡不住了（比如室友），只能开音乐盖过去。有人说是后续固件削弱了，不过我感觉买来就这吊样。可惜市面上还是没有能达到聋子模拟器效果的降噪耳机，遗憾。</p><span id="more"></span><hr /><p>AirPods Pro 另外一个比较受关注的新功能就是「<a href="https://support.apple.com/zh-cn/HT211775">空间音频</a>」，简单来说就是通过耳机里的各种传感器和一系列计算来调整声音，模拟出影院级（据说）的环绕声效果。到手的时候我就拿爱奇艺上的《复仇者联盟4》测试了一下，确实挺 amazing 的。</p><p>为什么要说这些呢？其实是因为我最近下了个 EVA 新剧场版的资源，里面封装的音轨是 6.1 声道的。然而就是这个视频文件，在播放到战斗激烈的场景时，我的所有设备上，无论扬声器还是耳机都会出现爆音（clipping）。</p><p><img src="/spatial-audio-for-local-videos/eva-new-film.jpg" alt="eva-new-film" /></p><p><del>新剧场版终章真的要上映了，你庵野鸽鸽什么时候骗过你</del></p><p>初步排查应该是多声道音源 downmix 成双声道播放的时候出问题了，因为封装在一起的双声道粤语音轨并不会爆音。感觉挺奇怪的，难道这些播放器在 downmix 的时候默认都没有音量电平限制吗？</p><p>就在搜索解决方法时，我突然想到了 AirPods Pro 的「空间音频」功能：既然这音轨本身就是环绕声，那么如果用空间音频来播放，岂不是正好？</p><p>查了一下，目前支持为本地视频开启空间音频的播放器不多：</p><ul><li><a href="https://forums.macrumors.com/threads/list-of-apps-that-work-with-spatial-audio.2255160/">List of Apps that work with Spatial Audio | MacRumors Forums</a></li><li><a href="https://www.reddit.com/r/AirpodsPro/comments/iteiov/thread_apps_that_work_with_spatial_audio/">Thread: Apps that work with Spatial Audio : AirpodsPro</a></li></ul><p>比如我主力使用的 nPlayer 目前就还不支持，遗憾。</p><blockquote><p>另外也发现了个有意思的 App：<a href="https://apps.apple.com/us/app/surround-speaker-check/id1052439918">Surround Sound Speaker Check</a></p><p>貌似原本是用来给家庭影院的环绕声音响系统做测试的，没想到还能拿来测试 AirPods Pro 空间音频，哈哈哈。用这个测试了一下，空间音频确实很有感觉，普通的双声道模拟环绕声的效果相形见绌，推荐各位也试试。</p></blockquote><p>下面对帖子中提到的几个播放器做一下测试。</p><hr /><p>使用的视频文件如下。</p><p>测试文件①：<a href="https://download.dolby.com/us/en/test-tones/dolby-atmos-trailer_amaze_1080.mp4">杜比官方宣传片</a>（<code>H.264</code> + <code>AC-3</code>，<code>MP4</code> 封装）</p><pre class="text"><code>Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;dolby-atmos-trailer_amaze_1080.mp4&#39;:  Duration: 00:01:03.55, start: 0.000000, bitrate: 9396 kb/s    Stream #0:0(und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p, 1920x1080 [SAR 1:1 DAR 16:9], 8946 kb/s, 24 fps, 24 tbr, 24 tbn, 48 tbc (default)    Stream #0:1(und): Audio: eac3 (ec-3 / 0x332D6365), 48000 Hz, 5.1(side), fltp, 448 kb/s (default)</code></pre><p>测试文件②：<a href="https://www2.iis.fraunhofer.de/AAC/ChID-BLITS-EBU.mp4">网上摸来的多声道 AAC</a>（<code>H.264</code> + <code>AAC</code>，<code>MP4</code> 封装）</p><pre class="text"><code>Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;ChID-BLITS-EBU.mp4&#39;:  Duration: 00:00:46.63, start: 0.000000, bitrate: 188 kb/s    Stream #0:0(und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p, 800x600, 26 kb/s, 8 fps, 8 tbr, 8 tbn, 16 tbc (default)    Stream #0:1(und): Audio: aac (HE-AAC) (mp4a / 0x6134706D), 44100 Hz, 5.1, fltp, 159 kb/s (default)</code></pre><p>测试文件②：<a href="https://share.dmhy.org/topics/view/553703_Neon_Genesis_Evangelion_TV_ONA_CD_2020_12_01.html">上面提到过的 EVA 新剧场版</a>（<code>H.264</code> + <code>FLAC</code>，<code>MKV</code> 封装）</p><pre class="text"><code>Input #0, matroska,webm, from &#39;Evangelion 1.11 You Are (Not) Alone 2007 [BD 1920x1080 23.976fps AVC-yuv420p10 FLAC].mkv&#39;:  Duration: 01:40:58.57, start: 0.000000, bitrate: 12663 kb/s    Stream #0:0(jpn): Video: h264 (High 10), yuv420p10le(progressive), 1920x1080, SAR 1:1 DAR 16:9, 23.98 fps, 23.98 tbr, 1k tbn, 47.95 tbc (default)    Stream #0:1(jpn): Audio: flac, 48000 Hz, 6.1, s16 (default)    Stream #0:2(eng): Audio: flac, 48000 Hz, 6.1, s16    Stream #0:3(chi): Audio: flac, 48000 Hz, stereo, s16</code></pre><p>测试文件④：对测试文件③进行转码（<code>H.264</code> + <code>AC-3</code>，<code>MP4</code> 封装）</p><pre class="bash"><code>ffmpeg -i &#39;Evangelion 1.11 You Are (Not) Alone 2007 [BD 1920x1080 23.976fps AVC-yuv420p10 FLAC].mkv&#39; -map 0:v:0 -map 0:a:0 -c:v h264_videotoolbox -c:a ac3 output.mp4</code></pre><pre class="text"><code>Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;output.mp4&#39;:  Duration: 01:40:58.57, start: 0.000000, bitrate: 52 kb/s    Stream #0:0(jpn): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 1920x1080 [SAR 1:1 DAR 16:9], 559 kb/s, 23.98 fps, 23.98 tbr, 24k tbn, 48k tbc (default)    Stream #0:1(jpn): Audio: ac3 (ac-3 / 0x332D6361), 48000 Hz, 5.1(side), fltp, 448 kb/s (default)</code></pre><p>测试结果（✅ 表示可以激活空间音频）：</p><table><thead><tr class="header"><th></th><th>文件1</th><th>文件2</th><th>文件3</th><th>文件4</th></tr></thead><tbody><tr class="odd"><td>PlayerXtreme</td><td>✅</td><td>✅</td><td>❌</td><td>✅</td></tr><tr class="even"><td>FE File Explorer</td><td>✅</td><td>✅</td><td>❓ *</td><td>✅</td></tr><tr class="odd"><td>Plex</td><td>✅</td><td>✅</td><td>✅ **</td><td>✅</td></tr></tbody></table><p>* FE File Explorer 播放 MKV 格式视频需要高级版，我就没测</p><p>** 需要修改 Plex Media Server 的配置，参考<a href="https://dwffls.com/posts/plex-spatial-audio/">这篇文章</a></p><hr /><p>目前猜测触发空间音频的条件是：</p><ul><li>使用系统解码器播放</li><li>音频为环绕声 AAC 或 AC-3 (E-AC-3)</li></ul><p>由于有服务端转码的配合，Plex 的兼容性表现最好，推荐。</p><p>题外话：经过 Plex 转码以后，就算关闭耳机的空间音频，直接播放也不会出现爆音了，不知道是不是转码的时候做了处理。另外空间音频效果确实好，结尾主题曲响起的时候差点以为我没戴耳机，感觉声音真的像是从 iPad 那边发出来的一样，神奇。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;继 &lt;a href=&quot;https://prinsss.github.io/airpods-2-are-great/&quot;&gt;AirPods 2&lt;/a&gt; 之后，前段时间我又没忍住，入手了传说中的&lt;del&gt;豌豆射手&lt;/del&gt; AirPods Pro。&lt;/p&gt;
&lt;p&gt;第一次体验到的「主动降噪」功能确实惊艳，虽然感觉对人声的处理还是差了点意思，但开和不开真的是两种完全不同的感受。尤其是乘坐公共交通的时候，感觉是终于夺回了一点耳朵的主导权，不用再一味地被各种噪声强奸了。&lt;/p&gt;
&lt;p&gt;用了几个月，总的来说挺满意的，就是这人声降噪实在是普通，近处的人说话大声点就挡不住了（比如室友），只能开音乐盖过去。有人说是后续固件削弱了，不过我感觉买来就这吊样。可惜市面上还是没有能达到聋子模拟器效果的降噪耳机，遗憾。&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://prinsss.github.io/categories/diary/"/>
    
    
    <category term="音视频" scheme="https://prinsss.github.io/tag/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    <category term="Apple" scheme="https://prinsss.github.io/tag/Apple/"/>
    
  </entry>
  
  <entry>
    <title>日区 Apple Music 优缺点与实际体验</title>
    <link href="https://prinsss.github.io/apple-music/"/>
    <id>https://prinsss.github.io/apple-music/</id>
    <published>2021-02-17T08:11:00.000Z</published>
    <updated>2021-02-17T08:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>想在一个平台上听到所有喜欢的歌，太难了。</p><p>虽说在大版权时代，资源还是存到自己的硬盘里最踏实，但下载党也不是那么好当的。而且习惯了流媒体的便利以后，我是越来越不愿意花那个心思了。然而国内音乐平台版权之争使得听歌体验愈发水深火热，我也不得不面对现实……</p><p>在网易云音乐的歌单灰掉一大片后，我终于决定跑路。</p><p>这篇文章算是我个人使用了半年多日区 Apple Music 的感受，如果你恰巧也在纠结如何选择，希望对你有所帮助。</p><span id="more"></span><h2 id="理想的流媒体音乐服务"><a href="#理想的流媒体音乐服务" class="headerlink" title="理想的流媒体音乐服务"></a>理想的流媒体音乐服务</h2><ul><li>曲库丰富</li><li>订阅价格适中</li><li>可以自己上传音乐</li><li>跨设备同步</li><li>个性化推荐</li><li>不要有花里胡哨的功能</li><li>界面好看</li><li><del>梦里什么都有</del></li></ul><h2 id="我主要听什么"><a href="#我主要听什么" class="headerlink" title="我主要听什么"></a>我主要听什么</h2><ul><li>Anisong（动画歌曲，<del>俗称二刺螈</del>）</li><li>J-Pop（日本流行音乐）</li><li>J-Rock（日本摇滚乐）</li></ul><p>其实我涉猎挺广泛的，各种类型都听一点。<del>真不是精日</del></p><h2 id="其他候选服务"><a href="#其他候选服务" class="headerlink" title="其他候选服务"></a>其他候选服务</h2><p>国内的网易云、QQ 音乐啥的是靠不住了，还是放眼海外吧。</p><p>除了外区 Apple Music，还有其他几个也是我考虑过的：</p><ul><li>Spotify</li><li>YouTube Music</li><li>ANiUTa</li></ul><p>最后还是选了 AM，原因下面说。</p><p>当然，每个人的音乐口味千差万别，最适合我的不一定最适合你。</p><h2 id="曲库还算可以"><a href="#曲库还算可以" class="headerlink" title="曲库还算可以"></a>曲库还算可以</h2><p>Apple Music 官方说的是「7000万曲聴き放題」，在日本所有音乐流媒体服务中算是数一数二（当然也还是得看你主要听什么）。</p><p>同样是日区，Spotify 我也试用过，<strong>可以说大部分 AM 没有的，Spotify 也没有；而 Spotify 有的，AM 基本也有</strong>，属于旗鼓相当的对手。比如说ヨルシカ、YOASOBI、Official髭男dism、あいみょん这些热门音乐人的歌，就是基本每家都有。</p><p>按照我自己使用下来的体验，其实想听的大部分歌都能在 Apple Music 里找到。</p><p>（当然这只是我个人的情况，毕竟我也不知道你要听什么）</p><p><img src="/apple-music/playlist-top15.jpg" alt="playlist-top15" /></p><h2 id="icloud-音乐资料库"><a href="#icloud-音乐资料库" class="headerlink" title="iCloud 音乐资料库"></a>iCloud 音乐资料库</h2><p>按照<a href="https://support.apple.com/zh-cn/guide/itunes/itnsa3dd5209/windows">官方文档</a>的描述：</p><blockquote><p>如果订阅了 Apple Music 或 iTunes Match，您可以使整个 iCloud 音乐资料库在使用同一个 Apple ID 登录的所有设备上都可用。只要接入互联网，即可随时访问您的资料库。</p></blockquote><p>可以理解为网易云那样的音乐云盘，曲库里没有的歌，可以自己上传。</p><ul><li>最多可以上传 100,000 首，每首最大 200MB</li><li>不占用 iCloud 存储空间</li></ul><p>这也是我选择 Apple Music 的最大原因：就算你曲库再大，总有些歌是没有的，比如各种特典 CD、会场限定等等，允许自己上传歌曲就很方便。</p><p>据说 Spotify 也可以播放本地音乐，但并不是上传到云端，还是没有 AM 好用。</p><h2 id="与-itunes-store-互通"><a href="#与-itunes-store-互通" class="headerlink" title="与 iTunes Store 互通"></a>与 iTunes Store 互通</h2><p>iTunes Store 作为日本最大的音乐在线配信平台，可以说大部分的歌如果有在网上卖，那肯定有在 iTunes Store 上卖；如果 iTunes Store 上没有，那八成就是没有在网上卖。</p><p>有些音乐 Apple Music 上没有提供，但是 iTunes Store 上是有卖的，比如「宇宙よりも遠い場所」「少女終末旅行」的 OP、ED、插入歌专辑。还有 <a href="https://prinsss.github.io/the-idolmaster/">IM@S 偶像大师系列</a>，万南不肯流媒体配信，唯一支持的 ANiUTa 还全都只有 short version，想第一时间听到新曲就只能上 iTunes Store 了。</p><p>毕竟都是水果家的服务，iTunes Store 上购买的专辑与单曲，也可以直接在 Apple Music 的应用中播放（废话）。</p><p>我实际使用下来，「Apple Music 流媒体提供的音乐」「iTunes Store 购买的音乐」和「自己上传到 iCloud 音乐资料库的音乐」都是一个待遇，播放、整理起来都没差别。比如下面这张图，如果我不说，你能分辨出它们的来源吗？</p><p><img src="/apple-music/mixed-music-library.jpg" alt="mixed-music-library" /></p><h2 id="用-itunes-整理资料库"><a href="#用-itunes-整理资料库" class="headerlink" title="用 iTunes 整理资料库"></a>用 iTunes 整理资料库</h2><p>哦对，现在 iTunes 已经拆成了三个独立应用，Music、Podcast 和 TV。</p><p>虽然 iTunes 的手机管理功能屎得不行（现在集成到 Finder 里去了，还是很屎，强力推荐 iMazing），但它的音乐库管理功能还是公认很强大的，metadata 编辑、智能播放列表都很好用。</p><p>而且只要添加到了自己的 iCloud 音乐资料库中，就算是 Apple Music 提供的音乐，其 metadata 也可以自由修改（比如专辑封面、艺人等），可以说是最接近本地曲库体验的流媒体音乐服务了。</p><p><img src="/apple-music/itunes.jpg" alt="itunes" /></p><h2 id="没有社交元素"><a href="#没有社交元素" class="headerlink" title="没有社交元素"></a>没有社交元素</h2><p>好吧，这对一部分人来说可能是缺点。不过我确实不喜欢那些花里胡哨的东西，不看评论，对「网抑云」也没有兴趣。</p><p>这是网易云音乐、QQ 音乐和 Apple Music 的首页对比，见仁见智吧。</p><p><img src="/apple-music/netease-qq-apple.jpg" alt="netease-qq-apple" /></p><p>另外，虽然没有社交，不过可以在搜索里搜到其他人分享的整理好的播放列表，比如我前段时间找《钢之炼金术师》OP、ED 时就省的自己一个一个找了，也挺方便的。</p><h2 id="官方播放列表推荐"><a href="#官方播放列表推荐" class="headerlink" title="官方播放列表推荐"></a>官方播放列表推荐</h2><p>Apple Music 的一大特色。</p><p>有个人推荐歌单、推荐电台、艺人歌单、音乐回忆歌单，等等。</p><p>其中我最中意的是编辑推荐歌单，比如：</p><ul><li><a href="https://music.apple.com/jp/playlist/2010%E5%B9%B4%E4%BB%A3-%E3%82%A2%E3%83%8B%E3%83%A1-%E3%83%99%E3%82%B9%E3%83%88/pl.407f5703ceb14a53a720d0fc5a3e4f3c">2010年代 アニメ ベスト</a></li><li><a href="https://music.apple.com/jp/playlist/2020%E5%B9%B4%E3%83%88%E3%83%83%E3%83%97%E3%82%BD%E3%83%B3%E3%82%B0100-%E6%97%A5%E6%9C%AC/pl.cdeb20ba9f4a4d55bc65638c454aac2a">2020年トップソング100：日本</a></li><li><a href="https://music.apple.com/jp/playlist/%E4%B9%85%E7%9F%B3%E8%AD%B2-%E3%82%B9%E3%82%BF%E3%82%B8%E3%82%AA%E3%82%B8%E3%83%96%E3%83%AA-%E3%83%99%E3%82%B9%E3%83%88/pl.9d00cd92b13746c096dd552d24a46a3b">久石譲 スタジオジブリ ベスト</a></li></ul><p>各种艺人歌单也是入坑的好机会：</p><ul><li><a href="https://music.apple.com/jp/playlist/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AE-%E3%83%A8%E3%83%AB%E3%82%B7%E3%82%AB/pl.1dceafb41aae4ad7ae2e65c205854ae3">はじめての ヨルシカ</a></li><li><a href="https://music.apple.com/jp/playlist/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AE-%E8%A5%BF%E9%87%8E%E3%82%AB%E3%83%8A/pl.cf5d3da7b02145c49e06d5a0571a82d2">はじめての 西野カナ</a></li><li><a href="https://music.apple.com/jp/playlist/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AE-tokyo-7th-%E3%82%B7%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BA/pl.a23505c213a840b2973a1d7b920a028f">はじめての Tokyo 7th シスターズ</a></li></ul><p>更多可以参考：<a href="https://sspai.com/post/63907">「用好」Apple Music，这些是你应了解的 - 少数派</a></p><h2 id="跨平台支持"><a href="#跨平台支持" class="headerlink" title="跨平台支持"></a>跨平台支持</h2><p>在换 iPhone 之前，我在 Android 上也用过一段时间的 Apple Music（没错，竟然有 Android 客户端……），出乎意料地体验还不错，让人难以相信是那个以「自家生态圈以外的软件都做成一坨屎」闻名的🍎。</p><p>Windows 上的 iTunes，体验也马马虎虎，但感觉没人喜欢用这个听音乐吧。</p><p>虽然其他平台上也有支持，但 Apple Music 体验最好的肯定还是水果全家桶。如果你手头一部 Apple 设备都没有，那我是<strong>不推荐</strong>你用 Apple Music 的，因为很可能光是如何付款就得折腾半天……</p><p>至于网页版的 Apple Music，说实话我就没有成功打开过。🌚</p><h2 id="切换-itunes-账号会清空下载"><a href="#切换-itunes-账号会清空下载" class="headerlink" title="切换 iTunes 账号会清空下载"></a>切换 iTunes 账号会清空下载</h2><p>说完优点说缺点。</p><p>Apple Music 的账号是跟着 iTunes Store/App Store 账号走的，不能独立设置。</p><p>也就是说如果你想要一直听日区 AM，那么就得保证 iTunes Store/App Store 的账号一直是日区（相信这对经常切外区账号下载 App 的 iOS 用户并不陌生）。</p><p>如果你临时需要下载一个只有国区 App Store 才有的 App，切了一下账号，那 Apple Music 的已下载音乐就会被清空。虽然资料库不会受影响，再登回日区账号就可以了，但又要再下载一遍还是很不爽。</p><blockquote><p>看到有人说切账号会清空<strong>资料库</strong>，但我实际没有遇到过，只是清空了下载。</p></blockquote><p>所以我现在一般是在 iPad 上切国区账号，下载完需要的 App，然后在电脑上通过 iMazing 安装 App 到手机，这样手机上就不需要切换账号了。</p><h2 id="无法手动同步音乐"><a href="#无法手动同步音乐" class="headerlink" title="无法手动同步音乐"></a>无法手动同步音乐</h2><p>想要使用 Apple Music，必须开启音乐<a href="https://support.apple.com/zh-cn/HT204926">资料库同步</a>。</p><p>一旦开了资料库同步，你的设备里的音乐就会被同步成和 iCloud 中的音乐资料库一样。如果想要把一首歌传到 iPhone 里，以前是通过 iTunes 直接同步过去就行了，现在你必须先在电脑上把歌添加到资料库中，等待它上传至 iCloud，然后再等它从 iCloud 下载到手机上，而且你的所有设备里都会出现这首歌。</p><p>也就是说，用了 Apple Music，你的所有水果设备就全都共享一个音乐资料库了。想听什么就往里面加，会自动同步，所有设备上都能听。方便是挺方便，但你如果想把一些音乐 locally 放到设备上，而不上传到云端的话，那就不好意思了。</p><p>我之前想把《异度神剑 2》的 OST 放到手机里，就因为这个问题，最后只能另寻他法 —— 我可不想把 7GB 的 OST 全部上传到 iCloud 资料库里去，更何况还会被压缩。</p><blockquote><p>一个解决方法就是不要用自带的音乐 App，下个其他的音乐播放器就可以了。我是在手机上下载了 VOX，然后把 OST 传到了 App 对应的文稿存储空间里解决的，手机版 foobar2000 和 Flacbox/Evermusic 也可以。</p></blockquote><h2 id="上传无损音乐会被压缩"><a href="#上传无损音乐会被压缩" class="headerlink" title="上传无损音乐会被压缩"></a>上传无损音乐会被压缩</h2><p>iCloud 音乐资料库不能上传无损音乐，ALAC 会被压缩成 256kbps AAC。</p><p>如果源文件就是 MP3/AAC 格式，那么上传后不会被压缩。</p><p><img src="/apple-music/alac-converted-to-aac.jpg" alt="alac-converted-to-aac" /></p><h2 id="滚动歌词不能自己添加"><a href="#滚动歌词不能自己添加" class="headerlink" title="滚动歌词不能自己添加"></a>滚动歌词不能自己添加</h2><p>Apple Music 支持滚动歌词，而且也挺好看的。不过这似乎只能是音乐发行人自己添加，用户是没办法自己添加滚动歌词的，添加的只能是静态歌词。搞不懂。</p><p>目前我感觉是 Apple Music 流媒体提供的歌大部分都有滚动歌词（听说有专门的团队负责？），iTunes Store 里买的歌，人气高的那些基本都有，但也有其他很多没有的（没错我说的就是你万代南梦宫）。</p><p>对于这些没有滚动歌词的音乐，想自己添加就只能添加静态歌词咯。</p><p><img src="/apple-music/scroll-lyrics.jpg" alt="scroll-lyrics" /></p><h2 id="部分功能需要科学上网"><a href="#部分功能需要科学上网" class="headerlink" title="部分功能需要科学上网"></a>部分功能需要科学上网</h2><p>姑且放到缺点里来吧。下面是我正在使用的代理规则片段：</p><pre class="text"><code># 播放自己上传的歌曲DOMAIN-SUFFIX,blobstore.apple.com# iTunes Store 音乐试听DOMAIN-SUFFIX,audio-ssl.itunes.apple.com# iTunes Store 购买后播放DOMAIN-SUFFIX,streamingaudio.itunes.apple.comDOMAIN-SUFFIX,itsliveradio.apple.comDOMAIN-SUFFIX,aodp-ssl.apple.comDOMAIN-SUFFIX,video-ssl.itunes.apple.comDOMAIN-SUFFIX,mvod.itunes.apple.comDOMAIN-SUFFIX,hls-amt.itunes.apple.comDOMAIN-SUFFIX,audio.itunes.apple.comDOMAIN-SUFFIX,genius.itunes.apple.comDOMAIN-SUFFIX,genius-upload.itunes.apple.comDOMAIN-SUFFIX,genius-download.itunes.apple.com</code></pre><p>参考：<a href="https://blog.butanediol.me/2020/05/07/%E6%8F%90%E5%8D%87%E5%9B%BD%E5%86%85-Apple-Music-%E4%BD%93%E9%AA%8C%E7%9A%84%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99/">提升国内 Apple Music 体验的代理规则 - 丁丁の店</a></p><h2 id="如何上车"><a href="#如何上车" class="headerlink" title="如何上车？"></a>如何上车？</h2><p>最后说一下日区 Apple Music 如何上车。目前的 plan 有：</p><ul><li>学生订阅，¥480/月</li><li>个人订阅，¥980/月</li><li>家庭订阅，¥1,480/月</li></ul><p>其中最划算的就是家庭订阅，最多可以 6 个人共享，算下来一个人每月只要 250 日元左右。如果加点钱上 <a href="https://www.apple.com/jp/apple-one/">Apple One</a> 家庭订阅（1,850円/月），每个月 300 日元，还能另外多出 Apple Arcade 和 200GB iCloud 存储空间。</p><p>如果想找人组队家庭订阅的话，推荐去蹲一下 Telegram 上的<a href="https://t.me/hezu2">大型合租群</a>。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总的来说缺点也有，瑕不掩瑜吧。</p><p>反正我用得是挺爽的，其他人咋样就不关我事了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;想在一个平台上听到所有喜欢的歌，太难了。&lt;/p&gt;
&lt;p&gt;虽说在大版权时代，资源还是存到自己的硬盘里最踏实，但下载党也不是那么好当的。而且习惯了流媒体的便利以后，我是越来越不愿意花那个心思了。然而国内音乐平台版权之争使得听歌体验愈发水深火热，我也不得不面对现实……&lt;/p&gt;
&lt;p&gt;在网易云音乐的歌单灰掉一大片后，我终于决定跑路。&lt;/p&gt;
&lt;p&gt;这篇文章算是我个人使用了半年多日区 Apple Music 的感受，如果你恰巧也在纠结如何选择，希望对你有所帮助。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://prinsss.github.io/categories/essay/"/>
    
    
    <category term="音视频" scheme="https://prinsss.github.io/tag/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    <category term="Apple" scheme="https://prinsss.github.io/tag/Apple/"/>
    
  </entry>
  
  <entry>
    <title>在 M1 Mac 上构建 x86 Docker 镜像</title>
    <link href="https://prinsss.github.io/build-x86-docker-images-on-an-m1-macs/"/>
    <id>https://prinsss.github.io/build-x86-docker-images-on-an-m1-macs/</id>
    <published>2021-02-16T21:38:00.000Z</published>
    <updated>2021-02-16T21:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天闲来无事，数了一下服务器上在跑的东西，打算把它们都扔到 Docker 里面去。第一个开刀的就是之前写的 <a href="https://prinsss.github.io/google-analytics-api-page-views-counter/">Google Analytics 博客阅读量统计</a>，很简单的一个 Node.js + Express 程序。</p><p>写完 <a href="https://github.com/prinsss/google-analytics-hit-counter">Dockerfile</a> 测试好，正准备 push 上去时，我才突然想起来：</p><p>我现在用的是 M1 MacBook，<strong>丫的默认 build 出来的镜像是 <code>arm64</code> 架构的呀！</strong></p><span id="more"></span><p>好在 M1 Mac 上的 <a href="https://docs.docker.com/docker-for-mac/apple-m1/">Docker Tech Preview</a> 也支持使用 <a href="https://docs.docker.com/buildx/working-with-buildx/">buildx</a> 构建多架构的镜像，稍微设置一下就可以了。</p><blockquote><p>题外话，M1 MacBook Air 真的很好用，建议早买早享受（</p></blockquote><h2 id="启用实验性功能"><a href="#启用实验性功能" class="headerlink" title="启用实验性功能"></a>启用实验性功能</h2><p>Docker 的 <code>buildx</code> 还是实验性功能，需要在 Docker Desktop 设置中开启，具体位于 <em>Preferences &gt; Experimental Features &gt; Enable CLI experimental features</em>。</p><h2 id="新建-builder-实例"><a href="#新建-builder-实例" class="headerlink" title="新建 builder 实例"></a>新建 builder 实例</h2><p>Docker 默认的 builder 不支持同时指定多个架构，所以要新建一个：</p><pre class="bash"><code>docker buildx create --use --name m1_builder</code></pre><p>查看并启动 builder 实例：</p><pre class="bash"><code>docker buildx inspect --bootstrap</code></pre><pre class="text"><code>Name:   m1_builderDriver: docker-containerNodes:Name:      m1_builder0Endpoint:  unix:///var/run/docker.sockStatus:    runningPlatforms: linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/arm/v7, linux/arm/v6</code></pre><p>其中 platforms 就是支持的架构，跨平台构建的底层是用 QEMU 实现的。</p><h2 id="构建多架构-docker-镜像"><a href="#构建多架构-docker-镜像" class="headerlink" title="构建多架构 Docker 镜像"></a>构建多架构 Docker 镜像</h2><p>使用 <code>buildx</code> 构建：</p><pre class="bash"><code>docker buildx build \  --platform linux/amd64,linux/arm64  --push -t prinsss/google-analytics-hit-counter .</code></pre><p>其中 <code>-t</code> 参数指定远程仓库，<code>--push</code> 表示将构建好的镜像推送到 Docker 仓库。如果不想直接推送，也可以改成 <code>--load</code>，即将构建结果加载到镜像列表中。</p><p><code>--platform</code> 参数就是要构建的目标平台，这里我就选了本机的 <code>arm64</code> 和服务器用的 <code>amd64</code>。最后的 <code>.</code>（构建路径）注意不要忘了加。</p><p>构建完 push 上去以后，可以查看远程仓库的 manifest：</p><pre class="bash"><code>docker buildx imagetools inspect prinsss/google-analytics-hit-counter</code></pre><pre class="text"><code>Name:      docker.io/prinsss/google-analytics-hit-counter:latestMediaType: application/vnd.docker.distribution.manifest.list.v2+jsonDigest:    sha256:a9a8d097abb4fce257ae065365be19accebce7d95df58142d6332270cb3e3478Manifests:  Name:      docker.io/prinsss/google-analytics-hit-counter:latest@sha256:bb7f3a996b66a1038de77db9289215ef01b18e685587e2ec4bb0a6403cc7ce78  MediaType: application/vnd.docker.distribution.manifest.v2+json  Platform:  linux/amd64  Name:      docker.io/prinsss/google-analytics-hit-counter:latest@sha256:94ea08ac45f38860254e5de2bae77dee6288dd7c9404d8da8a3578d6912e68e7  MediaType: application/vnd.docker.distribution.manifest.v2+json  Platform:  linux/arm64</code></pre><p>可以看到已经是支持多架构的镜像了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://jaimyn.com.au/how-to-build-multi-architecture-docker-images-on-an-m1-mac/#tldr;">How to build x86 (and others!) Docker images on an M1 Mac - Jaimyn Mayer’s Blog</a></li><li><a href="https://medium.com/better-programming/how-to-actually-deploy-docker-images-built-on-a-m1-macs-with-apple-silicon-a35e39318e97">How to Actually Deploy Docker Images Built on M1 Macs With Apple Silicon | by Jon Vogel</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/buildx/multi-arch-images">使用 buildx 构建多种系统架构支持的 Docker 镜像 - Docker —— 从入门到实践</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天闲来无事，数了一下服务器上在跑的东西，打算把它们都扔到 Docker 里面去。第一个开刀的就是之前写的 &lt;a href=&quot;https://prinsss.github.io/google-analytics-api-page-views-counter/&quot;&gt;Google Analytics 博客阅读量统计&lt;/a&gt;，很简单的一个 Node.js + Express 程序。&lt;/p&gt;
&lt;p&gt;写完 &lt;a href=&quot;https://github.com/prinsss/google-analytics-hit-counter&quot;&gt;Dockerfile&lt;/a&gt; 测试好，正准备 push 上去时，我才突然想起来：&lt;/p&gt;
&lt;p&gt;我现在用的是 M1 MacBook，&lt;strong&gt;丫的默认 build 出来的镜像是 &lt;code&gt;arm64&lt;/code&gt; 架构的呀！&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="Docker" scheme="https://prinsss.github.io/tag/Docker/"/>
    
    <category term="Mac" scheme="https://prinsss.github.io/tag/Mac/"/>
    
  </entry>
  
  <entry>
    <title>React 入门：实现基本登录注册功能</title>
    <link href="https://prinsss.github.io/react-login-sign-up/"/>
    <id>https://prinsss.github.io/react-login-sign-up/</id>
    <published>2021-02-10T05:27:06.000Z</published>
    <updated>2021-02-10T05:27:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端老年人复健篇，堂堂连载！</p><p>两年多没碰前端，感觉自己已经完全与时代脱节了。作为一个从 jQuery 一把梭时代过来的选手，对于现在那些「大前端」的玩意儿基本都是只懂个皮毛的状态（指看过 Hello world）。四年前我引用过这么一篇文章，<a href="https://zhuanlan.zhihu.com/p/22782487">《在 2016 年学 JavaScript 是一种什么样的体验？》</a>，放到现在要是出个 2021 版本，估计会更唬人吧。</p><span id="more"></span><p>不过嘛，主要的技术其实还是那么几个：</p><ul><li>前端工程化（模块化、组件化、自动化等）</li><li>TypeScript（支持静态类型检查的 JavaScript）</li><li>ES6+（箭头函数、模板字符串、async/await 等新语法）</li><li>三大框架（Angular、React、Vue）</li><li>跨端技术（Electron、React Native、Flutter、小程序）</li></ul><p>对于初学者来说可能是有些复杂，但应该还没到「求不要更新了，老子学不动了」的程度。</p><p>举个例子，最开始，大家都用原生 HTML、CSS、JavaScript 三板斧来开发网页。后来有人觉得原生的那些方法操作 DOM 啥的太麻烦了，于是弄出了 jQuery 和大家喜闻乐见的 <code>$('#id')</code>；觉得代码组织不方便，于是弄出了各种<a href="https://prinsss.github.io/how-could-i-use-es6-modules-in-production/">模块化解决方案</a>；觉得 Callback Hell 太傻X了，于是有了 Promise 和 async/await。觉得 JS 没有类型系统太容易出 BUG，于是有了 TS；觉得手动监听事件、操作 DOM 太麻烦了，于是有了数据绑定和三大框架；因为上面这些乱七八糟的最后都得拿去浏览器跑，所以有了 Babel、Webpack 和各种工具链；还有人觉得前端技术这么牛逼，光写网页怎么够，于是有了各种大前端、跨端开发技术……</p><p>如此种种，其实没有哪个技术是凭空蹦出来的，都是有需求才有人去做。如果你在实际开发中体会到了这个需求，那么这些新技术的出现也就变得理所当然了。而这也是我推荐新人学一门编程语言不要从框架学起的原因：比如从 Vue 开始学前端，从 Laravel 开始学 PHP，从 Spring 开始学 Java，很容易知其然而不知其所以然。</p><p>好了废话就到这里，今天咱们来用 React 实现一个基本的登录注册系统。</p><hr /><p>【后面的内容鸽了】</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前端老年人复健篇，堂堂连载！&lt;/p&gt;
&lt;p&gt;两年多没碰前端，感觉自己已经完全与时代脱节了。作为一个从 jQuery 一把梭时代过来的选手，对于现在那些「大前端」的玩意儿基本都是只懂个皮毛的状态（指看过 Hello world）。四年前我引用过这么一篇文章，&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22782487&quot;&gt;《在 2016 年学 JavaScript 是一种什么样的体验？》&lt;/a&gt;，放到现在要是出个 2021 版本，估计会更唬人吧。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="前端" scheme="https://prinsss.github.io/tag/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://prinsss.github.io/tag/React/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Actions 自动部署 Hexo 博客</title>
    <link href="https://prinsss.github.io/use-github-actions-to-deploy-hexo-blog/"/>
    <id>https://prinsss.github.io/use-github-actions-to-deploy-hexo-blog/</id>
    <published>2021-02-06T20:05:38.000Z</published>
    <updated>2021-02-06T20:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>联动三年前的文章：<a href="https://prinsss.github.io/deploy-hexo-blog-automatically-with-travis-ci/">使用 Travis CI 自动部署 Hexo 博客</a></p><p>今天更新了一下博客，寻思着好歹也改一下页脚的 Copyright 年份，改完 push 上去以后却发现 GitHub Pages 迟迟没有更新。进去 Travis CI 一看，发现任务一直处于 Queued 状态，半小时了都没开始构建。</p><p>查了一下，并不是只有我遇到了类似情况（似乎是因为 Travis CI 正在将 travis-ci.org 迁移至 travis-ci.com）：</p><ul><li><a href="https://travis-ci.community/t/builds-hang-in-queued-state/10250">Builds hang in queued state</a></li><li><a href="https://travis-ci.community/t/builds-queuing-for-hours-with-public-git-repo/10351">Builds queuing for hours with public git repo</a></li></ul><p>看了一圈感觉有点悬，干脆换成 GitHub Actions 吧。</p><h2 id="section"><span id="more"><a href="#section"><span id="more" class="headerlink" title=""></a></span></h2><p>我的博客完全托管在 GitHub 上：<a href="https://github.com/prinsss/prinsss.github.io">prinsss.github.io</a>，其中 <code>source</code> 分支放的是源码，<code>master</code> 分支（即 GitHub Pages）是 Hexo 生成的静态博客页面。</p><p>要做的也和之前 Travis CI 差不多，当 <code>source</code> 分支有更新时，自动使用 Hexo 构建新页面并更新 GitHub Pages 就可以了。</p><h2 id="配置部署密钥"><a href="#配置部署密钥" class="headerlink" title="配置部署密钥"></a>配置部署密钥</h2><p>生成一个新的 SSH 密钥，用于 push 至 GitHub Pages 所在的 repo：</p><pre class="bash"><code>ssh-keygen -f hexo-deploy-key -C &quot;prinsss.github.io&quot;</code></pre><p>将公钥 <code>hexo-deploy-key.pub</code> 设置为仓库的部署密钥（Settings &gt; Deploy keys）：</p><p><img src="/use-github-actions-to-deploy-hexo-blog/add-deploy-key.png" alt="add-deploy-key" /></p><p>然后在 Settings &gt; Secrets 中新增一个 secret，命名为 <code>DEPLOY_KEY</code>，把私钥 <code>hexo-deploy-key</code> 的内容复制进去，供后续使用。</p><h2 id="编写-workflow"><a href="#编写-workflow" class="headerlink" title="编写 Workflow"></a>编写 Workflow</h2><p>Workflow 就是 GitHub Actions 的配置文件，类似于 <code>.travis.yml</code>。</p><p>首先新建文件：</p><pre class="bash"><code>mkdir -p .github/workflowstouch .github/workflows/deploy.yml</code></pre><p>编辑 <code>deploy.yml</code>：</p><pre class="yaml"><code>name: Hexo Deploy# 只监听 source 分支的改动on:  push:    branches:      - source# 自定义环境变量env:  POST_ASSET_IMAGE_CDN: truejobs:  build-and-deploy:    runs-on: ubuntu-latest    steps:      # 获取博客源码和主题      - name: Checkout        uses: actions/checkout@v2      - name: Checkout theme repo        uses: actions/checkout@v2        with:          repository: prinsss/hexo-theme-murasaki          ref: master          path: themes/murasaki      # 这里用的是 Node.js 14.x      - name: Set up Node.js        uses: actions/setup-node@v1        with:          node-version: &#39;14&#39;      # 设置 yarn 缓存，npm 的话可以看 actions/cache@v2 的文档示例      - name: Get yarn cache directory path        id: yarn-cache-dir-path        run: echo &quot;::set-output name=dir::$(yarn cache dir)&quot;      - name: Use yarn cache        uses: actions/cache@v2        id: yarn-cache        with:          path: $&#123;&#123; steps.yarn-cache-dir-path.outputs.dir &#125;&#125;          key: $&#123;&#123; runner.os &#125;&#125;-yarn-$&#123;&#123; hashFiles('**/yarn.lock') &#125;&#125;          restore-keys: |            $&#123;&#123; runner.os &#125;&#125;-yarn-      # 安装依赖      - name: Install dependencies        run: |          yarn install --prefer-offline --frozen-lockfile      # 从之前设置的 secret 获取部署私钥      - name: Set up environment        env:          DEPLOY_KEY: $&#123;&#123; secrets.DEPLOY_KEY &#125;&#125;        run: |          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;          mkdir -p ~/.ssh          echo &quot;$DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts      # 生成并部署      - name: Deploy        run: |          npx hexo deploy --generate</code></pre><p>当然，具体步骤还是得根据自己的需求进行相应的修改。</p><p>GitHub Pages 相关的具体配置放在了 Hexo 的 <code>_config.yml</code> 里：</p><pre class="yaml"><code>deploy:  type: git  repo: git@github.com:prinsss/prinsss.github.io.git  branch: master  name: prinsss  email: prinsss@gmail.com</code></pre><h2 id="部署结果"><a href="#部署结果" class="headerlink" title="部署结果"></a>部署结果</h2><p>更新 <code>source</code> 分支，push 后 GitHub Actions 就会自动执行。</p><p><img src="/use-github-actions-to-deploy-hexo-blog/deploy-result.png" alt="deploy-result" /></p><p>不到半分钟就 build 完了，只能说微软爸爸还是牛逼。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions">Workflow syntax for GitHub Actions - GitHub Docs</a></li><li><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客 | Sanonz</a></li><li><a href="https://github.com/marketplace/actions/hexo-action">Hexo Action · Actions · GitHub Marketplace</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;联动三年前的文章：&lt;a href=&quot;https://prinsss.github.io/deploy-hexo-blog-automatically-with-travis-ci/&quot;&gt;使用 Travis CI 自动部署 Hexo 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天更新了一下博客，寻思着好歹也改一下页脚的 Copyright 年份，改完 push 上去以后却发现 GitHub Pages 迟迟没有更新。进去 Travis CI 一看，发现任务一直处于 Queued 状态，半小时了都没开始构建。&lt;/p&gt;
&lt;p&gt;查了一下，并不是只有我遇到了类似情况（似乎是因为 Travis CI 正在将 travis-ci.org 迁移至 travis-ci.com）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://travis-ci.community/t/builds-hang-in-queued-state/10250&quot;&gt;Builds hang in queued state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://travis-ci.community/t/builds-queuing-for-hours-with-public-git-repo/10351&quot;&gt;Builds queuing for hours with public git repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看了一圈感觉有点悬，干脆换成 GitHub Actions 吧。&lt;/p&gt;
&lt;h2 id=&quot;section&quot;&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="博客" scheme="https://prinsss.github.io/tag/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="https://prinsss.github.io/tag/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>绕过校园网分享限制，构建愉快的宿舍网络环境</title>
    <link href="https://prinsss.github.io/campus-network-sharing/"/>
    <id>https://prinsss.github.io/campus-network-sharing/</id>
    <published>2020-10-18T08:45:00.000Z</published>
    <updated>2020-10-18T08:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近大一新生们开学了，就有几位学弟来问我说，咱们学校的校园网要怎么才能开 WiFi 热点、能不能用路由器。回想一下当初我也折腾了好一段时间，本来想水篇博客的，后来不知道怎么的就咕咕咕了……正好借此机会分享一下。</p><p>其实吧，学校有的是办法搞你。除了强制一人一号、恶心的专用拨号客户端防共享以外，还能通过 <a href="https://www.xavier.wang/post/45-suck-shit-lan/">IPID、TTL、时钟偏移检测</a>，甚至是 DPI 深度包检测的方法来防私接，就看校方做得够不够绝了。当然破解的方法也有，但基本也不会让你好受。如果碰到这样的校园网，推荐你直接躺平，给这种垃圾网络交钱还不如开个无限流量套餐呢。</p><p><strong>免责声明：日后你惹出祸来，不把师父说出来就行了.jpg</strong></p><span id="more"></span><h2 id="校园网的限制"><a href="#校园网的限制" class="headerlink" title="校园网的限制"></a>校园网的限制</h2><p>先说一下我们学校校园网恶心的地方。接入网线后，你需要：</p><ol type="1"><li>使用【软件A】进行第一次拨号：<ul><li>【软件A】会进行多网卡检测，如果你的系统里有一个以上的网络适配器，则拒绝拨号；</li><li>上述网络适配器包括硬件网卡（USB 网卡、无线网卡）和虚拟网卡（各种虚拟机的虚拟网卡、TAP 网卡等）；</li><li>认证类型为 802.1x 认证。</li></ul></li><li>使用【软件B】进行第二次拨号：<ul><li>【软件B】不检测网卡，但会拒绝在虚拟机中运行，如果宿主机开了 Hyper-V 还会误报；</li><li>检测猎豹 WiFi、360 WiFi 等共享软件的进程；</li><li>认证类型为 L2TP VPN。</li></ul></li></ol><p>而且这两个软件只能在 Windows 上跑，macOS、Linux 用户就干瞪眼吧。</p><p><del>其实说到这里，有些人应该都心里有数这俩软件是啥。不过我这里就不明说了，懂的都懂（x</del></p><p>接下来来看一下网上常见的破解方案，也就是<strong>路由器拨号</strong>。</p><p>据说网上有很多人在卖所谓的「校园网路由器」，其实说白了就是刷了 OpenWRT 的路由器 + 破解校园网的插件。如果有现成的插件能用，那自然是最好，刷个固件也不是什么难事。但不幸的是，目前网上并没有针对【软件A】新版本的拨号脚本，而旧版本的已经不再适用于我们学校的网络了。除非另有大神愿意开发新版本的拨号脚本，否则这条路是行不通的。更何况我们这还要二次拨号，更是难上加难。</p><p><img src="/campus-network-sharing/taobao-campus-routers.jpg" alt="taobao-campus-routers" /></p><p>而如果想要在电脑上直接分享热点，第一会被检测多网卡，第二可能会被检测进程。</p><p>emmmmm……🤔</p><p>那么，让我们的网卡不被检测到不就行了？</p><h2 id="使用虚拟机绕过网卡检测"><a href="#使用虚拟机绕过网卡检测" class="headerlink" title="使用虚拟机绕过网卡检测"></a>使用虚拟机绕过网卡检测</h2><p>这个方法其实是以前我偶然发现的。</p><p>当时我在用虚拟机捣鼓 Kali Linux，用了 VirtualBox 的 USB Passthrough 功能把 USB 外接网卡穿透进虚拟机给 Kali 使用。此时，宿主机操作系统里是看不见这个 USB 网卡的，设备管理器、网络适配器里都没有，就像不存在一样。不存在……嗯？</p><p>于是我翻箱倒柜找出了几年前凑单买的小米随身 WiFi，在虚拟机里一通操作：</p><p><img src="/campus-network-sharing/vm-windows-xp-miwifi.png" alt="vm-windows-xp-miwifi" /></p><p>嘿，成了！</p><blockquote><p>如何配置，搜索「VirtualBox USB 网卡」即可。</p></blockquote><p>看来虚拟机的 USB 直通确实可以避开校园网认证客户端的多网卡检测，而且客户端也并没有对 VirtualBox 做什么手脚（后来查了一下，据说【软件A】会干扰 VMware 的 NAT 网络共享服务……）。那么，能做的事情可就多了。</p><h2 id="使用有线网卡桥接路由器"><a href="#使用有线网卡桥接路由器" class="headerlink" title="使用有线网卡桥接路由器"></a>使用有线网卡桥接路由器</h2><p>上面的方案能用是能用，但效率过于低下。</p><ol type="1"><li>虚拟机系统没必要用 Windows，就算是 XP 也是性能浪费；</li><li>USB 无线网卡孱弱的 WiFi 性能不足以满足我的需求；</li><li>每次开机都要启动虚拟机，操作繁琐复杂。</li></ol><p>既然要用得爽，那肯定得把这些问题解决了。</p><p>首先，把 USB 无线网卡换成 USB 有线网卡，下联硬路由作为 AP。同时，把 Guest OS 换成轻量级的 Alpine Linux 并实现开机启动。完成后的网络拓扑图类似这样（综合考虑最后还是选择了两层 NAT）：</p><p><img src="/campus-network-sharing/network-topology.png" alt="network-topology" /></p><p>首先在虚拟机内安装 <a href="https://alpinelinux.org/">Alpine Linux</a> 和对应的网卡驱动（注意不要用 virt 版本的内核，很多驱动都被精简掉了）：</p><pre class="bash"><code>ip link show</code></pre><pre class="text"><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:002: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP qlen 1000    link/ether [mac addr] brd ff:ff:ff:ff:ff:ff3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP qlen 1000    link/ether [mac addr] brd ff:ff:ff:ff:ff:ff4: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP qlen 1000    link/ether [mac addr] brd ff:ff:ff:ff:ff:ff</code></pre><p>添加网桥，把 USB 网卡和虚拟机的虚拟网卡桥接到一起：</p><pre class="bash"><code>brctl addbr br0brctl addif br0 eth0brctl addif br0 eth1brctl show</code></pre><p>启动网络：</p><pre class="bash"><code>ip link set dev eth1 upip link set dev br0 upip link show</code></pre><p>删除之前分配给虚拟网卡 eth0 的 IP，并启动 DHCP 客户端为 br0 获取 IP 地址：</p><pre class="bash"><code>ip addr flush dev eth0udhcpc -i br0ip addr show</code></pre><p>此时应该虚拟机内、有线网卡端都能访问网络了，可以通过 <code>ping</code> 测试一下。</p><p>可以用的话就永久保存网络配置：</p><pre class="bash"><code>vi /etc/network/interfaces</code></pre><pre class="text"><code>auto loiface lo inet loopbackauto br0iface br0 inet dhcp        hostname alpine-vm        bridge-ports eth0 eth1        bridge-stp 0</code></pre><p>接下来把 USB 网卡和路由器的 WAN 口用网线连接起来，测试是否工作正常。如果想省一层 NAT，可以连到 LAN 口上并关闭路由器 DHCP 功能，就当个单纯的 AP 使用。不过我为了相对稳定的内网环境，还是选择了前者。</p><p><img src="/campus-network-sharing/router-interfaces.jpg" alt="router-interfaces" /></p><p>一切正常的话，就可以愉快地使用 WiFi 啦。</p><p>如果想要让 Alpine 虚拟机开机后台运行，可以使用 <a href="https://github.com/toptensoftware/VBoxHeadlessTray">VBoxHeadlessTray</a> 这个程序。</p><p><img src="/campus-network-sharing/virtualbox-alpine-booting.png" alt="virtualbox-alpine-booting" /></p><h2 id="当前方案的不足之处"><a href="#当前方案的不足之处" class="headerlink" title="当前方案的不足之处"></a>当前方案的不足之处</h2><p>至此，我们的校园网网络共享方案已经算是比较完善了。</p><p>幸运的是，我校似乎并没有部署其他什么防私接技术，像这样用了半年多也一直相安无事，省下我不少流量费。</p><p>然而，这个方案还是有些不爽的地方。</p><ol type="1"><li>作为主机的电脑和其他设备不在一个子网下；</li><li>电脑必须一直开着其他设备才能有网。</li></ol><p>在这套方案下，<strong>路由器下联的设备对于主机是几乎不可见的</strong>（不然也绕不过校园网分享限制了）。你可以在其他设备上访问主机上的网络服务（VirtualBox 的 NAT 网络里宿主机的 IP 一般为 <code>10.0.2.2</code>，子网下的设备可以直接访问，效果和主机上访问 <code>localhost</code> 基本一致），但无法反过来访问子网里的其他设备。</p><p>虽然你也可以通过 VirtualBox 的端口映射实现一些变通的解决，比如把路由器的 22、80 端口映射到宿主机上方便访问，但 SMB 这类服务就不行了（Windows 访问 SMB 服务器时强制端口为 445，无法手动指定，要改只能改注册表），所以我完全无法在主机上访问子网下的 NAS 设备。</p><p>这也太难受了，继续改进！</p><p>既然这些软件都需要跑在一台 Windows 机器上，那我专门弄一台机器来跑校园网相关的东西不就好了吗？</p><h2 id="入手双网口工控机软路由"><a href="#入手双网口工控机软路由" class="headerlink" title="入手双网口工控机软路由"></a>入手双网口工控机软路由</h2><p>于是我把目光投向了最近几年很火的软路由。</p><blockquote><p>就像计算机有软件和硬件的区别，路由器也有「软」「硬」之分。通常我们在各个电商平台上搜索「路由器」这三个关键词所得到的几乎所有商品都属于硬路由，它是由路由器厂商基于自行开发或是开源的嵌入式设备操作系统，根据特定的硬件设备，设计出来的传统硬件设备。</p><p>而与之对应的软路由，是基于软件工具在普通的硬件上来实现传统路由器的功能。<strong>我们可以在旧电脑、工控机、开发板、服务器甚至是硬件虚拟机中安装软路由系统，然后通过强大的软件实现各种各样的功能。</strong></p><p>——<a href="https://sspai.com/post/58628">《从听说到上手，人人都能看懂的软路由入门指南》</a></p></blockquote><p>一番比较后，我在某鱼上入手了一台二手的双网口工控机，安装 Windows 7 系统后，将上面的所有校园网相关的软件都转移到了这台低功耗小主机上。</p><p>至于为什么买双网口的机器，虽然 VirtualBox 只能直通 USB 网卡所以还是得外接，不过考虑到以后不用校园网了还可以原地变身软路由，所以不如直接一步到位买个好点的。毕竟现在 CPU 差不多的也就几百块，没必要省那点钱买个电子垃圾。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这套方案我用了一年多，基本上没啥问题。24 小时开机、低功耗、子网设备无感知，爽到。</p><p>另外，不要怪我写得这么笼统，毕竟每个学校的校园网都不太一样，很难写出一篇普适性的教程。这篇文章充其量算个 PoC，证明一下只要能折腾，还是能捣鼓出舒适的宿舍网络环境的。</p><p>如果你是大佬，甚至可以写个软件实现一样的功能，隐藏网卡、软件 NAT 啥的。不过我是菜鸡，也不想在这上面花太多心思，所以就这样吧。又不是不能用.jpg</p><p>至于这么折腾值不值得，那就见仁见智了。至少我是愿意的：<strong>你不让我开热点我就不开，那我岂不是很没有面子。</strong>老子又不是没交钱，凭什么？</p><p><img src="/campus-network-sharing/smiling-dog.png" alt="smiling-dog" /></p><p>最后，祝各位早日摆脱傻逼校园网。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近大一新生们开学了，就有几位学弟来问我说，咱们学校的校园网要怎么才能开 WiFi 热点、能不能用路由器。回想一下当初我也折腾了好一段时间，本来想水篇博客的，后来不知道怎么的就咕咕咕了……正好借此机会分享一下。&lt;/p&gt;
&lt;p&gt;其实吧，学校有的是办法搞你。除了强制一人一号、恶心的专用拨号客户端防共享以外，还能通过 &lt;a href=&quot;https://www.xavier.wang/post/45-suck-shit-lan/&quot;&gt;IPID、TTL、时钟偏移检测&lt;/a&gt;，甚至是 DPI 深度包检测的方法来防私接，就看校方做得够不够绝了。当然破解的方法也有，但基本也不会让你好受。如果碰到这样的校园网，推荐你直接躺平，给这种垃圾网络交钱还不如开个无限流量套餐呢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;免责声明：日后你惹出祸来，不把师父说出来就行了.jpg&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://prinsss.github.io/categories/tech/"/>
    
    
    <category term="网络" scheme="https://prinsss.github.io/tag/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
